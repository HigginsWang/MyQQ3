// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#include "proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FILE_proto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LINK_proto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USER_USERID_USERNAME_proto_2eproto;
namespace MyQQ3Proto {
class C2S_LOGINDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_LOGIN> _instance;
} _C2S_LOGIN_default_instance_;
class S2C_LOGINRETDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_LOGINRET> _instance;
} _S2C_LOGINRET_default_instance_;
class USER_USERID_USERNAMEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USER_USERID_USERNAME> _instance;
} _USER_USERID_USERNAME_default_instance_;
class C2S_GETALLFRIENDSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<C2S_GETALLFRIENDS> _instance;
} _C2S_GETALLFRIENDS_default_instance_;
class S2C_GETALLFRIENDSRETDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<S2C_GETALLFRIENDSRET> _instance;
} _S2C_GETALLFRIENDSRET_default_instance_;
class FILEDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FILE> _instance;
} _FILE_default_instance_;
class LINKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LINK> _instance;
} _LINK_default_instance_;
class CHATRECORDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHATRECORD> _instance;
} _CHATRECORD_default_instance_;
}  // namespace MyQQ3Proto
static void InitDefaultsscc_info_C2S_GETALLFRIENDS_proto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MyQQ3Proto::_C2S_GETALLFRIENDS_default_instance_;
    new (ptr) ::MyQQ3Proto::C2S_GETALLFRIENDS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyQQ3Proto::C2S_GETALLFRIENDS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_GETALLFRIENDS_proto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_GETALLFRIENDS_proto_2eproto}, {}};

static void InitDefaultsscc_info_C2S_LOGIN_proto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MyQQ3Proto::_C2S_LOGIN_default_instance_;
    new (ptr) ::MyQQ3Proto::C2S_LOGIN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyQQ3Proto::C2S_LOGIN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_C2S_LOGIN_proto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_C2S_LOGIN_proto_2eproto}, {}};

static void InitDefaultsscc_info_CHATRECORD_proto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MyQQ3Proto::_CHATRECORD_default_instance_;
    new (ptr) ::MyQQ3Proto::CHATRECORD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyQQ3Proto::CHATRECORD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CHATRECORD_proto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CHATRECORD_proto_2eproto}, {
      &scc_info_FILE_proto_2eproto.base,
      &scc_info_LINK_proto_2eproto.base,}};

static void InitDefaultsscc_info_FILE_proto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MyQQ3Proto::_FILE_default_instance_;
    new (ptr) ::MyQQ3Proto::FILE();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyQQ3Proto::FILE::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FILE_proto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FILE_proto_2eproto}, {}};

static void InitDefaultsscc_info_LINK_proto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MyQQ3Proto::_LINK_default_instance_;
    new (ptr) ::MyQQ3Proto::LINK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyQQ3Proto::LINK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LINK_proto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LINK_proto_2eproto}, {}};

static void InitDefaultsscc_info_S2C_GETALLFRIENDSRET_proto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MyQQ3Proto::_S2C_GETALLFRIENDSRET_default_instance_;
    new (ptr) ::MyQQ3Proto::S2C_GETALLFRIENDSRET();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyQQ3Proto::S2C_GETALLFRIENDSRET::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_S2C_GETALLFRIENDSRET_proto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_S2C_GETALLFRIENDSRET_proto_2eproto}, {
      &scc_info_USER_USERID_USERNAME_proto_2eproto.base,}};

static void InitDefaultsscc_info_S2C_LOGINRET_proto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MyQQ3Proto::_S2C_LOGINRET_default_instance_;
    new (ptr) ::MyQQ3Proto::S2C_LOGINRET();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyQQ3Proto::S2C_LOGINRET::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_S2C_LOGINRET_proto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_S2C_LOGINRET_proto_2eproto}, {}};

static void InitDefaultsscc_info_USER_USERID_USERNAME_proto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MyQQ3Proto::_USER_USERID_USERNAME_default_instance_;
    new (ptr) ::MyQQ3Proto::USER_USERID_USERNAME();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyQQ3Proto::USER_USERID_USERNAME::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USER_USERID_USERNAME_proto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USER_USERID_USERNAME_proto_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::C2S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::C2S_LOGIN, name_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::C2S_LOGIN, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::S2C_LOGINRET, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::S2C_LOGINRET, iflogin_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::S2C_LOGINRET, userid_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::S2C_LOGINRET, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::USER_USERID_USERNAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::USER_USERID_USERNAME, userid_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::USER_USERID_USERNAME, username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::C2S_GETALLFRIENDS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::C2S_GETALLFRIENDS, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::S2C_GETALLFRIENDSRET, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::S2C_GETALLFRIENDSRET, userid_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::S2C_GETALLFRIENDSRET, username_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::S2C_GETALLFRIENDSRET, friends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::FILE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::FILE, filename_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::FILE, filesize_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::FILE, filebytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::LINK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::LINK, linkstring_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, chatrecordtype_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, content_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, file_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, link_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, uuid_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, usersenderid_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, usersendername_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, userreceiverid_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, userreceivername_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, chatrecordsendtimestamp_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, chatrecordserverreceivertimestamp_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, chatrecordserversendtimestamp_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, chatrecordreceivetimestamp_),
  PROTOBUF_FIELD_OFFSET(::MyQQ3Proto::CHATRECORD, remark_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MyQQ3Proto::C2S_LOGIN)},
  { 7, -1, sizeof(::MyQQ3Proto::S2C_LOGINRET)},
  { 15, -1, sizeof(::MyQQ3Proto::USER_USERID_USERNAME)},
  { 22, -1, sizeof(::MyQQ3Proto::C2S_GETALLFRIENDS)},
  { 28, -1, sizeof(::MyQQ3Proto::S2C_GETALLFRIENDSRET)},
  { 36, -1, sizeof(::MyQQ3Proto::FILE)},
  { 44, -1, sizeof(::MyQQ3Proto::LINK)},
  { 50, -1, sizeof(::MyQQ3Proto::CHATRECORD)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MyQQ3Proto::_C2S_LOGIN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MyQQ3Proto::_S2C_LOGINRET_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MyQQ3Proto::_USER_USERID_USERNAME_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MyQQ3Proto::_C2S_GETALLFRIENDS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MyQQ3Proto::_S2C_GETALLFRIENDSRET_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MyQQ3Proto::_FILE_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MyQQ3Proto::_LINK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::MyQQ3Proto::_CHATRECORD_default_instance_),
};

const char descriptor_table_protodef_proto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013proto.proto\022\nMyQQ3Proto\"+\n\tC2S_LOGIN\022\014"
  "\n\004name\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\"A\n\014S2C_LO"
  "GINRET\022\017\n\007ifLogin\030\001 \001(\005\022\016\n\006userid\030\002 \001(\t\022"
  "\020\n\010username\030\003 \001(\t\"8\n\024USER_USERID_USERNAM"
  "E\022\016\n\006userid\030\001 \001(\t\022\020\n\010username\030\002 \001(\t\"#\n\021C"
  "2S_GETALLFRIENDS\022\016\n\006userid\030\001 \001(\t\"k\n\024S2C_"
  "GETALLFRIENDSRET\022\016\n\006userid\030\001 \001(\t\022\020\n\010user"
  "name\030\002 \001(\t\0221\n\007friends\030\003 \003(\0132 .MyQQ3Proto"
  ".USER_USERID_USERNAME\"=\n\004FILE\022\020\n\010filenam"
  "e\030\001 \001(\t\022\020\n\010filesize\030\002 \001(\003\022\021\n\tfilebytes\030\003"
  " \001(\014\"\032\n\004LINK\022\022\n\nlinkstring\030\001 \001(\t\"\205\005\n\nCHA"
  "TRECORD\022=\n\016chatrecordtype\030\001 \001(\0162%.MyQQ3P"
  "roto.CHATRECORD.CHATRECORDTYPE\022\017\n\007conten"
  "t\030\002 \001(\t\022\036\n\004file\030\003 \001(\0132\020.MyQQ3Proto.FILE\022"
  "\036\n\004link\030\004 \001(\0132\020.MyQQ3Proto.LINK\022\014\n\004uuid\030"
  "\005 \001(\t\022\024\n\014usersenderid\030\006 \001(\t\022\026\n\016usersende"
  "rname\030\007 \001(\t\022\026\n\016userreceiverid\030\010 \001(\t\022\030\n\020u"
  "serreceivername\030\t \001(\t\022\037\n\027chatrecordsendt"
  "imestamp\030\n \001(\t\022)\n!chatrecordserverreceiv"
  "ertimestamp\030\013 \001(\t\022%\n\035chatrecordserversen"
  "dtimestamp\030\014 \001(\t\022\"\n\032chatrecordreceivetim"
  "estamp\030\r \001(\t\022\016\n\006remark\030\016 \001(\t\"\321\001\n\016CHATREC"
  "ORDTYPE\022 \n\034CHATRECORDTYPE_TEXTPLUSEMOJO\020"
  "\000\022\030\n\024CHATRECORDTYPE_IMAGE\020\001\022\030\n\024CHATRECOR"
  "DTYPE_VIDEO\020\002\022\034\n\030CHATRECORDTYPE_OTHERFIL"
  "E\020\003\022\027\n\023CHATRECORDTYPE_LINK\020\004\022\030\n\024CHATRECO"
  "RDTYPE_VOICE\020\005\022\030\n\024CHATRECORDTYPE_OTHER\020\006"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2eproto_sccs[8] = {
  &scc_info_C2S_GETALLFRIENDS_proto_2eproto.base,
  &scc_info_C2S_LOGIN_proto_2eproto.base,
  &scc_info_CHATRECORD_proto_2eproto.base,
  &scc_info_FILE_proto_2eproto.base,
  &scc_info_LINK_proto_2eproto.base,
  &scc_info_S2C_GETALLFRIENDSRET_proto_2eproto.base,
  &scc_info_S2C_LOGINRET_proto_2eproto.base,
  &scc_info_USER_USERID_USERNAME_proto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2eproto = {
  false, false, descriptor_table_protodef_proto_2eproto, "proto.proto", 1088,
  &descriptor_table_proto_2eproto_once, descriptor_table_proto_2eproto_sccs, descriptor_table_proto_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_proto_2eproto::offsets,
  file_level_metadata_proto_2eproto, 8, file_level_enum_descriptors_proto_2eproto, file_level_service_descriptors_proto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2eproto)), true);
namespace MyQQ3Proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHATRECORD_CHATRECORDTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2eproto);
  return file_level_enum_descriptors_proto_2eproto[0];
}
bool CHATRECORD_CHATRECORDTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CHATRECORD_CHATRECORDTYPE CHATRECORD::CHATRECORDTYPE_TEXTPLUSEMOJO;
constexpr CHATRECORD_CHATRECORDTYPE CHATRECORD::CHATRECORDTYPE_IMAGE;
constexpr CHATRECORD_CHATRECORDTYPE CHATRECORD::CHATRECORDTYPE_VIDEO;
constexpr CHATRECORD_CHATRECORDTYPE CHATRECORD::CHATRECORDTYPE_OTHERFILE;
constexpr CHATRECORD_CHATRECORDTYPE CHATRECORD::CHATRECORDTYPE_LINK;
constexpr CHATRECORD_CHATRECORDTYPE CHATRECORD::CHATRECORDTYPE_VOICE;
constexpr CHATRECORD_CHATRECORDTYPE CHATRECORD::CHATRECORDTYPE_OTHER;
constexpr CHATRECORD_CHATRECORDTYPE CHATRECORD::CHATRECORDTYPE_MIN;
constexpr CHATRECORD_CHATRECORDTYPE CHATRECORD::CHATRECORDTYPE_MAX;
constexpr int CHATRECORD::CHATRECORDTYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void C2S_LOGIN::InitAsDefaultInstance() {
}
class C2S_LOGIN::_Internal {
 public:
};

C2S_LOGIN::C2S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MyQQ3Proto.C2S_LOGIN)
}
C2S_LOGIN::C2S_LOGIN(const C2S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MyQQ3Proto.C2S_LOGIN)
}

void C2S_LOGIN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2S_LOGIN_proto_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

C2S_LOGIN::~C2S_LOGIN() {
  // @@protoc_insertion_point(destructor:MyQQ3Proto.C2S_LOGIN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C2S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_LOGIN::ArenaDtor(void* object) {
  C2S_LOGIN* _this = reinterpret_cast< C2S_LOGIN* >(object);
  (void)_this;
}
void C2S_LOGIN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2S_LOGIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_LOGIN& C2S_LOGIN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_LOGIN_proto_2eproto.base);
  return *internal_default_instance();
}


void C2S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:MyQQ3Proto.C2S_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_LOGIN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.C2S_LOGIN.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.C2S_LOGIN.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_LOGIN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyQQ3Proto.C2S_LOGIN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.C2S_LOGIN.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.C2S_LOGIN.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyQQ3Proto.C2S_LOGIN)
  return target;
}

size_t C2S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyQQ3Proto.C2S_LOGIN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_LOGIN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyQQ3Proto.C2S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_LOGIN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_LOGIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyQQ3Proto.C2S_LOGIN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyQQ3Proto.C2S_LOGIN)
    MergeFrom(*source);
  }
}

void C2S_LOGIN::MergeFrom(const C2S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyQQ3Proto.C2S_LOGIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
}

void C2S_LOGIN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyQQ3Proto.C2S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_LOGIN::CopyFrom(const C2S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyQQ3Proto.C2S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_LOGIN::IsInitialized() const {
  return true;
}

void C2S_LOGIN::InternalSwap(C2S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_LOGIN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_LOGINRET::InitAsDefaultInstance() {
}
class S2C_LOGINRET::_Internal {
 public:
};

S2C_LOGINRET::S2C_LOGINRET(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MyQQ3Proto.S2C_LOGINRET)
}
S2C_LOGINRET::S2C_LOGINRET(const S2C_LOGINRET& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userid(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  iflogin_ = from.iflogin_;
  // @@protoc_insertion_point(copy_constructor:MyQQ3Proto.S2C_LOGINRET)
}

void S2C_LOGINRET::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S2C_LOGINRET_proto_2eproto.base);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iflogin_ = 0;
}

S2C_LOGINRET::~S2C_LOGINRET() {
  // @@protoc_insertion_point(destructor:MyQQ3Proto.S2C_LOGINRET)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S2C_LOGINRET::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S2C_LOGINRET::ArenaDtor(void* object) {
  S2C_LOGINRET* _this = reinterpret_cast< S2C_LOGINRET* >(object);
  (void)_this;
}
void S2C_LOGINRET::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S2C_LOGINRET::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_LOGINRET& S2C_LOGINRET::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_LOGINRET_proto_2eproto.base);
  return *internal_default_instance();
}


void S2C_LOGINRET::Clear() {
// @@protoc_insertion_point(message_clear_start:MyQQ3Proto.S2C_LOGINRET)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  iflogin_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_LOGINRET::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ifLogin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iflogin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.S2C_LOGINRET.userid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.S2C_LOGINRET.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_LOGINRET::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyQQ3Proto.S2C_LOGINRET)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ifLogin = 1;
  if (this->iflogin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_iflogin(), target);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.S2C_LOGINRET.userid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_userid(), target);
  }

  // string username = 3;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.S2C_LOGINRET.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyQQ3Proto.S2C_LOGINRET)
  return target;
}

size_t S2C_LOGINRET::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyQQ3Proto.S2C_LOGINRET)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userid = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string username = 3;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // int32 ifLogin = 1;
  if (this->iflogin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iflogin());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_LOGINRET::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyQQ3Proto.S2C_LOGINRET)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_LOGINRET* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_LOGINRET>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyQQ3Proto.S2C_LOGINRET)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyQQ3Proto.S2C_LOGINRET)
    MergeFrom(*source);
  }
}

void S2C_LOGINRET::MergeFrom(const S2C_LOGINRET& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyQQ3Proto.S2C_LOGINRET)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.iflogin() != 0) {
    _internal_set_iflogin(from._internal_iflogin());
  }
}

void S2C_LOGINRET::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyQQ3Proto.S2C_LOGINRET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_LOGINRET::CopyFrom(const S2C_LOGINRET& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyQQ3Proto.S2C_LOGINRET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LOGINRET::IsInitialized() const {
  return true;
}

void S2C_LOGINRET::InternalSwap(S2C_LOGINRET* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(iflogin_, other->iflogin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LOGINRET::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USER_USERID_USERNAME::InitAsDefaultInstance() {
}
class USER_USERID_USERNAME::_Internal {
 public:
};

USER_USERID_USERNAME::USER_USERID_USERNAME(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MyQQ3Proto.USER_USERID_USERNAME)
}
USER_USERID_USERNAME::USER_USERID_USERNAME(const USER_USERID_USERNAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userid(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MyQQ3Proto.USER_USERID_USERNAME)
}

void USER_USERID_USERNAME::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USER_USERID_USERNAME_proto_2eproto.base);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

USER_USERID_USERNAME::~USER_USERID_USERNAME() {
  // @@protoc_insertion_point(destructor:MyQQ3Proto.USER_USERID_USERNAME)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USER_USERID_USERNAME::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void USER_USERID_USERNAME::ArenaDtor(void* object) {
  USER_USERID_USERNAME* _this = reinterpret_cast< USER_USERID_USERNAME* >(object);
  (void)_this;
}
void USER_USERID_USERNAME::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USER_USERID_USERNAME::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USER_USERID_USERNAME& USER_USERID_USERNAME::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USER_USERID_USERNAME_proto_2eproto.base);
  return *internal_default_instance();
}


void USER_USERID_USERNAME::Clear() {
// @@protoc_insertion_point(message_clear_start:MyQQ3Proto.USER_USERID_USERNAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USER_USERID_USERNAME::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.USER_USERID_USERNAME.userid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.USER_USERID_USERNAME.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USER_USERID_USERNAME::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyQQ3Proto.USER_USERID_USERNAME)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userid = 1;
  if (this->userid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.USER_USERID_USERNAME.userid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.USER_USERID_USERNAME.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyQQ3Proto.USER_USERID_USERNAME)
  return target;
}

size_t USER_USERID_USERNAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyQQ3Proto.USER_USERID_USERNAME)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userid = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USER_USERID_USERNAME::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyQQ3Proto.USER_USERID_USERNAME)
  GOOGLE_DCHECK_NE(&from, this);
  const USER_USERID_USERNAME* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USER_USERID_USERNAME>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyQQ3Proto.USER_USERID_USERNAME)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyQQ3Proto.USER_USERID_USERNAME)
    MergeFrom(*source);
  }
}

void USER_USERID_USERNAME::MergeFrom(const USER_USERID_USERNAME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyQQ3Proto.USER_USERID_USERNAME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
}

void USER_USERID_USERNAME::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyQQ3Proto.USER_USERID_USERNAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USER_USERID_USERNAME::CopyFrom(const USER_USERID_USERNAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyQQ3Proto.USER_USERID_USERNAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USER_USERID_USERNAME::IsInitialized() const {
  return true;
}

void USER_USERID_USERNAME::InternalSwap(USER_USERID_USERNAME* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata USER_USERID_USERNAME::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void C2S_GETALLFRIENDS::InitAsDefaultInstance() {
}
class C2S_GETALLFRIENDS::_Internal {
 public:
};

C2S_GETALLFRIENDS::C2S_GETALLFRIENDS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MyQQ3Proto.C2S_GETALLFRIENDS)
}
C2S_GETALLFRIENDS::C2S_GETALLFRIENDS(const C2S_GETALLFRIENDS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MyQQ3Proto.C2S_GETALLFRIENDS)
}

void C2S_GETALLFRIENDS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_C2S_GETALLFRIENDS_proto_2eproto.base);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

C2S_GETALLFRIENDS::~C2S_GETALLFRIENDS() {
  // @@protoc_insertion_point(destructor:MyQQ3Proto.C2S_GETALLFRIENDS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C2S_GETALLFRIENDS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_GETALLFRIENDS::ArenaDtor(void* object) {
  C2S_GETALLFRIENDS* _this = reinterpret_cast< C2S_GETALLFRIENDS* >(object);
  (void)_this;
}
void C2S_GETALLFRIENDS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2S_GETALLFRIENDS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const C2S_GETALLFRIENDS& C2S_GETALLFRIENDS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_C2S_GETALLFRIENDS_proto_2eproto.base);
  return *internal_default_instance();
}


void C2S_GETALLFRIENDS::Clear() {
// @@protoc_insertion_point(message_clear_start:MyQQ3Proto.C2S_GETALLFRIENDS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_GETALLFRIENDS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.C2S_GETALLFRIENDS.userid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_GETALLFRIENDS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyQQ3Proto.C2S_GETALLFRIENDS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userid = 1;
  if (this->userid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.C2S_GETALLFRIENDS.userid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyQQ3Proto.C2S_GETALLFRIENDS)
  return target;
}

size_t C2S_GETALLFRIENDS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyQQ3Proto.C2S_GETALLFRIENDS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userid = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_GETALLFRIENDS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyQQ3Proto.C2S_GETALLFRIENDS)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_GETALLFRIENDS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_GETALLFRIENDS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyQQ3Proto.C2S_GETALLFRIENDS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyQQ3Proto.C2S_GETALLFRIENDS)
    MergeFrom(*source);
  }
}

void C2S_GETALLFRIENDS::MergeFrom(const C2S_GETALLFRIENDS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyQQ3Proto.C2S_GETALLFRIENDS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void C2S_GETALLFRIENDS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyQQ3Proto.C2S_GETALLFRIENDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_GETALLFRIENDS::CopyFrom(const C2S_GETALLFRIENDS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyQQ3Proto.C2S_GETALLFRIENDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_GETALLFRIENDS::IsInitialized() const {
  return true;
}

void C2S_GETALLFRIENDS::InternalSwap(C2S_GETALLFRIENDS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_GETALLFRIENDS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void S2C_GETALLFRIENDSRET::InitAsDefaultInstance() {
}
class S2C_GETALLFRIENDSRET::_Internal {
 public:
};

S2C_GETALLFRIENDSRET::S2C_GETALLFRIENDSRET(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  friends_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MyQQ3Proto.S2C_GETALLFRIENDSRET)
}
S2C_GETALLFRIENDSRET::S2C_GETALLFRIENDSRET(const S2C_GETALLFRIENDSRET& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userid(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MyQQ3Proto.S2C_GETALLFRIENDSRET)
}

void S2C_GETALLFRIENDSRET::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_S2C_GETALLFRIENDSRET_proto_2eproto.base);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

S2C_GETALLFRIENDSRET::~S2C_GETALLFRIENDSRET() {
  // @@protoc_insertion_point(destructor:MyQQ3Proto.S2C_GETALLFRIENDSRET)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void S2C_GETALLFRIENDSRET::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void S2C_GETALLFRIENDSRET::ArenaDtor(void* object) {
  S2C_GETALLFRIENDSRET* _this = reinterpret_cast< S2C_GETALLFRIENDSRET* >(object);
  (void)_this;
}
void S2C_GETALLFRIENDSRET::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void S2C_GETALLFRIENDSRET::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const S2C_GETALLFRIENDSRET& S2C_GETALLFRIENDSRET::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_S2C_GETALLFRIENDSRET_proto_2eproto.base);
  return *internal_default_instance();
}


void S2C_GETALLFRIENDSRET::Clear() {
// @@protoc_insertion_point(message_clear_start:MyQQ3Proto.S2C_GETALLFRIENDSRET)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  friends_.Clear();
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_GETALLFRIENDSRET::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.S2C_GETALLFRIENDSRET.userid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.S2C_GETALLFRIENDSRET.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MyQQ3Proto.USER_USERID_USERNAME friends = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* S2C_GETALLFRIENDSRET::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyQQ3Proto.S2C_GETALLFRIENDSRET)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userid = 1;
  if (this->userid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.S2C_GETALLFRIENDSRET.userid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.S2C_GETALLFRIENDSRET.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // repeated .MyQQ3Proto.USER_USERID_USERNAME friends = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_friends_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_friends(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyQQ3Proto.S2C_GETALLFRIENDSRET)
  return target;
}

size_t S2C_GETALLFRIENDSRET::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyQQ3Proto.S2C_GETALLFRIENDSRET)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MyQQ3Proto.USER_USERID_USERNAME friends = 3;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string userid = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2C_GETALLFRIENDSRET::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyQQ3Proto.S2C_GETALLFRIENDSRET)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_GETALLFRIENDSRET* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<S2C_GETALLFRIENDSRET>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyQQ3Proto.S2C_GETALLFRIENDSRET)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyQQ3Proto.S2C_GETALLFRIENDSRET)
    MergeFrom(*source);
  }
}

void S2C_GETALLFRIENDSRET::MergeFrom(const S2C_GETALLFRIENDSRET& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyQQ3Proto.S2C_GETALLFRIENDSRET)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
  if (from.userid().size() > 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
}

void S2C_GETALLFRIENDSRET::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyQQ3Proto.S2C_GETALLFRIENDSRET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_GETALLFRIENDSRET::CopyFrom(const S2C_GETALLFRIENDSRET& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyQQ3Proto.S2C_GETALLFRIENDSRET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_GETALLFRIENDSRET::IsInitialized() const {
  return true;
}

void S2C_GETALLFRIENDSRET::InternalSwap(S2C_GETALLFRIENDSRET* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  friends_.InternalSwap(&other->friends_);
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_GETALLFRIENDSRET::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FILE::InitAsDefaultInstance() {
}
class FILE::_Internal {
 public:
};

FILE::FILE(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MyQQ3Proto.FILE)
}
FILE::FILE(const FILE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  filebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filebytes().empty()) {
    filebytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filebytes(),
      GetArena());
  }
  filesize_ = from.filesize_;
  // @@protoc_insertion_point(copy_constructor:MyQQ3Proto.FILE)
}

void FILE::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FILE_proto_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filebytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filesize_ = PROTOBUF_LONGLONG(0);
}

FILE::~FILE() {
  // @@protoc_insertion_point(destructor:MyQQ3Proto.FILE)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FILE::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filebytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FILE::ArenaDtor(void* object) {
  FILE* _this = reinterpret_cast< FILE* >(object);
  (void)_this;
}
void FILE::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FILE::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FILE& FILE::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FILE_proto_2eproto.base);
  return *internal_default_instance();
}


void FILE::Clear() {
// @@protoc_insertion_point(message_clear_start:MyQQ3Proto.FILE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filebytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filesize_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FILE::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.FILE.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 filesize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          filesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes filebytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filebytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FILE::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyQQ3Proto.FILE)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.FILE.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // int64 filesize = 2;
  if (this->filesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_filesize(), target);
  }

  // bytes filebytes = 3;
  if (this->filebytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_filebytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyQQ3Proto.FILE)
  return target;
}

size_t FILE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyQQ3Proto.FILE)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // bytes filebytes = 3;
  if (this->filebytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_filebytes());
  }

  // int64 filesize = 2;
  if (this->filesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_filesize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FILE::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyQQ3Proto.FILE)
  GOOGLE_DCHECK_NE(&from, this);
  const FILE* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FILE>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyQQ3Proto.FILE)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyQQ3Proto.FILE)
    MergeFrom(*source);
  }
}

void FILE::MergeFrom(const FILE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyQQ3Proto.FILE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.filebytes().size() > 0) {
    _internal_set_filebytes(from._internal_filebytes());
  }
  if (from.filesize() != 0) {
    _internal_set_filesize(from._internal_filesize());
  }
}

void FILE::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyQQ3Proto.FILE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FILE::CopyFrom(const FILE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyQQ3Proto.FILE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FILE::IsInitialized() const {
  return true;
}

void FILE::InternalSwap(FILE* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filebytes_.Swap(&other->filebytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(filesize_, other->filesize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FILE::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LINK::InitAsDefaultInstance() {
}
class LINK::_Internal {
 public:
};

LINK::LINK(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MyQQ3Proto.LINK)
}
LINK::LINK(const LINK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  linkstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_linkstring().empty()) {
    linkstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_linkstring(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:MyQQ3Proto.LINK)
}

void LINK::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LINK_proto_2eproto.base);
  linkstring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LINK::~LINK() {
  // @@protoc_insertion_point(destructor:MyQQ3Proto.LINK)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LINK::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  linkstring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LINK::ArenaDtor(void* object) {
  LINK* _this = reinterpret_cast< LINK* >(object);
  (void)_this;
}
void LINK::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LINK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LINK& LINK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LINK_proto_2eproto.base);
  return *internal_default_instance();
}


void LINK::Clear() {
// @@protoc_insertion_point(message_clear_start:MyQQ3Proto.LINK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linkstring_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LINK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string linkstring = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_linkstring();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.LINK.linkstring"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LINK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyQQ3Proto.LINK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string linkstring = 1;
  if (this->linkstring().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_linkstring().data(), static_cast<int>(this->_internal_linkstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.LINK.linkstring");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_linkstring(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyQQ3Proto.LINK)
  return target;
}

size_t LINK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyQQ3Proto.LINK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string linkstring = 1;
  if (this->linkstring().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_linkstring());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LINK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyQQ3Proto.LINK)
  GOOGLE_DCHECK_NE(&from, this);
  const LINK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LINK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyQQ3Proto.LINK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyQQ3Proto.LINK)
    MergeFrom(*source);
  }
}

void LINK::MergeFrom(const LINK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyQQ3Proto.LINK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.linkstring().size() > 0) {
    _internal_set_linkstring(from._internal_linkstring());
  }
}

void LINK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyQQ3Proto.LINK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LINK::CopyFrom(const LINK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyQQ3Proto.LINK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LINK::IsInitialized() const {
  return true;
}

void LINK::InternalSwap(LINK* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  linkstring_.Swap(&other->linkstring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LINK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHATRECORD::InitAsDefaultInstance() {
  ::MyQQ3Proto::_CHATRECORD_default_instance_._instance.get_mutable()->file_ = const_cast< ::MyQQ3Proto::FILE*>(
      ::MyQQ3Proto::FILE::internal_default_instance());
  ::MyQQ3Proto::_CHATRECORD_default_instance_._instance.get_mutable()->link_ = const_cast< ::MyQQ3Proto::LINK*>(
      ::MyQQ3Proto::LINK::internal_default_instance());
}
class CHATRECORD::_Internal {
 public:
  static const ::MyQQ3Proto::FILE& file(const CHATRECORD* msg);
  static const ::MyQQ3Proto::LINK& link(const CHATRECORD* msg);
};

const ::MyQQ3Proto::FILE&
CHATRECORD::_Internal::file(const CHATRECORD* msg) {
  return *msg->file_;
}
const ::MyQQ3Proto::LINK&
CHATRECORD::_Internal::link(const CHATRECORD* msg) {
  return *msg->link_;
}
CHATRECORD::CHATRECORD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:MyQQ3Proto.CHATRECORD)
}
CHATRECORD::CHATRECORD(const CHATRECORD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  usersenderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usersenderid().empty()) {
    usersenderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_usersenderid(),
      GetArena());
  }
  usersendername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_usersendername().empty()) {
    usersendername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_usersendername(),
      GetArena());
  }
  userreceiverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userreceiverid().empty()) {
    userreceiverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userreceiverid(),
      GetArena());
  }
  userreceivername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userreceivername().empty()) {
    userreceivername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userreceivername(),
      GetArena());
  }
  chatrecordsendtimestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatrecordsendtimestamp().empty()) {
    chatrecordsendtimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_chatrecordsendtimestamp(),
      GetArena());
  }
  chatrecordserverreceivertimestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatrecordserverreceivertimestamp().empty()) {
    chatrecordserverreceivertimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_chatrecordserverreceivertimestamp(),
      GetArena());
  }
  chatrecordserversendtimestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatrecordserversendtimestamp().empty()) {
    chatrecordserversendtimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_chatrecordserversendtimestamp(),
      GetArena());
  }
  chatrecordreceivetimestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chatrecordreceivetimestamp().empty()) {
    chatrecordreceivetimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_chatrecordreceivetimestamp(),
      GetArena());
  }
  remark_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remark().empty()) {
    remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_remark(),
      GetArena());
  }
  if (from._internal_has_file()) {
    file_ = new ::MyQQ3Proto::FILE(*from.file_);
  } else {
    file_ = nullptr;
  }
  if (from._internal_has_link()) {
    link_ = new ::MyQQ3Proto::LINK(*from.link_);
  } else {
    link_ = nullptr;
  }
  chatrecordtype_ = from.chatrecordtype_;
  // @@protoc_insertion_point(copy_constructor:MyQQ3Proto.CHATRECORD)
}

void CHATRECORD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CHATRECORD_proto_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usersenderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usersendername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userreceiverid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userreceivername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatrecordsendtimestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatrecordserverreceivertimestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatrecordserversendtimestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatrecordreceivetimestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remark_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chatrecordtype_) -
      reinterpret_cast<char*>(&file_)) + sizeof(chatrecordtype_));
}

CHATRECORD::~CHATRECORD() {
  // @@protoc_insertion_point(destructor:MyQQ3Proto.CHATRECORD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CHATRECORD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usersenderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usersendername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userreceiverid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  userreceivername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatrecordsendtimestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatrecordserverreceivertimestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatrecordserversendtimestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatrecordreceivetimestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remark_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete file_;
  if (this != internal_default_instance()) delete link_;
}

void CHATRECORD::ArenaDtor(void* object) {
  CHATRECORD* _this = reinterpret_cast< CHATRECORD* >(object);
  (void)_this;
}
void CHATRECORD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CHATRECORD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHATRECORD& CHATRECORD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHATRECORD_proto_2eproto.base);
  return *internal_default_instance();
}


void CHATRECORD::Clear() {
// @@protoc_insertion_point(message_clear_start:MyQQ3Proto.CHATRECORD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  usersenderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  usersendername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userreceiverid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userreceivername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chatrecordsendtimestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chatrecordserverreceivertimestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chatrecordserversendtimestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chatrecordreceivetimestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remark_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && file_ != nullptr) {
    delete file_;
  }
  file_ = nullptr;
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
  chatrecordtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CHATRECORD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MyQQ3Proto.CHATRECORD.CHATRECORDTYPE chatrecordtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chatrecordtype(static_cast<::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE>(val));
        } else goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.CHATRECORD.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MyQQ3Proto.FILE file = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MyQQ3Proto.LINK link = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.CHATRECORD.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usersenderid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_usersenderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.CHATRECORD.usersenderid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string usersendername = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_usersendername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.CHATRECORD.usersendername"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userreceiverid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_userreceiverid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.CHATRECORD.userreceiverid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string userreceivername = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_userreceivername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.CHATRECORD.userreceivername"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chatrecordsendtimestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_chatrecordsendtimestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.CHATRECORD.chatrecordsendtimestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chatrecordserverreceivertimestamp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_chatrecordserverreceivertimestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.CHATRECORD.chatrecordserverreceivertimestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chatrecordserversendtimestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_chatrecordserversendtimestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.CHATRECORD.chatrecordserversendtimestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chatrecordreceivetimestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_chatrecordreceivetimestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.CHATRECORD.chatrecordreceivetimestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remark = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_remark();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "MyQQ3Proto.CHATRECORD.remark"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHATRECORD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyQQ3Proto.CHATRECORD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyQQ3Proto.CHATRECORD.CHATRECORDTYPE chatrecordtype = 1;
  if (this->chatrecordtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_chatrecordtype(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.CHATRECORD.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // .MyQQ3Proto.FILE file = 3;
  if (this->has_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::file(this), target, stream);
  }

  // .MyQQ3Proto.LINK link = 4;
  if (this->has_link()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::link(this), target, stream);
  }

  // string uuid = 5;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.CHATRECORD.uuid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_uuid(), target);
  }

  // string usersenderid = 6;
  if (this->usersenderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usersenderid().data(), static_cast<int>(this->_internal_usersenderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.CHATRECORD.usersenderid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_usersenderid(), target);
  }

  // string usersendername = 7;
  if (this->usersendername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usersendername().data(), static_cast<int>(this->_internal_usersendername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.CHATRECORD.usersendername");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_usersendername(), target);
  }

  // string userreceiverid = 8;
  if (this->userreceiverid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userreceiverid().data(), static_cast<int>(this->_internal_userreceiverid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.CHATRECORD.userreceiverid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_userreceiverid(), target);
  }

  // string userreceivername = 9;
  if (this->userreceivername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userreceivername().data(), static_cast<int>(this->_internal_userreceivername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.CHATRECORD.userreceivername");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_userreceivername(), target);
  }

  // string chatrecordsendtimestamp = 10;
  if (this->chatrecordsendtimestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chatrecordsendtimestamp().data(), static_cast<int>(this->_internal_chatrecordsendtimestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.CHATRECORD.chatrecordsendtimestamp");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_chatrecordsendtimestamp(), target);
  }

  // string chatrecordserverreceivertimestamp = 11;
  if (this->chatrecordserverreceivertimestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chatrecordserverreceivertimestamp().data(), static_cast<int>(this->_internal_chatrecordserverreceivertimestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.CHATRECORD.chatrecordserverreceivertimestamp");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_chatrecordserverreceivertimestamp(), target);
  }

  // string chatrecordserversendtimestamp = 12;
  if (this->chatrecordserversendtimestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chatrecordserversendtimestamp().data(), static_cast<int>(this->_internal_chatrecordserversendtimestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.CHATRECORD.chatrecordserversendtimestamp");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_chatrecordserversendtimestamp(), target);
  }

  // string chatrecordreceivetimestamp = 13;
  if (this->chatrecordreceivetimestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chatrecordreceivetimestamp().data(), static_cast<int>(this->_internal_chatrecordreceivetimestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.CHATRECORD.chatrecordreceivetimestamp");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_chatrecordreceivetimestamp(), target);
  }

  // string remark = 14;
  if (this->remark().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remark().data(), static_cast<int>(this->_internal_remark().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyQQ3Proto.CHATRECORD.remark");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_remark(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyQQ3Proto.CHATRECORD)
  return target;
}

size_t CHATRECORD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyQQ3Proto.CHATRECORD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string uuid = 5;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string usersenderid = 6;
  if (this->usersenderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usersenderid());
  }

  // string usersendername = 7;
  if (this->usersendername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usersendername());
  }

  // string userreceiverid = 8;
  if (this->userreceiverid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userreceiverid());
  }

  // string userreceivername = 9;
  if (this->userreceivername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userreceivername());
  }

  // string chatrecordsendtimestamp = 10;
  if (this->chatrecordsendtimestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatrecordsendtimestamp());
  }

  // string chatrecordserverreceivertimestamp = 11;
  if (this->chatrecordserverreceivertimestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatrecordserverreceivertimestamp());
  }

  // string chatrecordserversendtimestamp = 12;
  if (this->chatrecordserversendtimestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatrecordserversendtimestamp());
  }

  // string chatrecordreceivetimestamp = 13;
  if (this->chatrecordreceivetimestamp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatrecordreceivetimestamp());
  }

  // string remark = 14;
  if (this->remark().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remark());
  }

  // .MyQQ3Proto.FILE file = 3;
  if (this->has_file()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_);
  }

  // .MyQQ3Proto.LINK link = 4;
  if (this->has_link()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_);
  }

  // .MyQQ3Proto.CHATRECORD.CHATRECORDTYPE chatrecordtype = 1;
  if (this->chatrecordtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chatrecordtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHATRECORD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyQQ3Proto.CHATRECORD)
  GOOGLE_DCHECK_NE(&from, this);
  const CHATRECORD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHATRECORD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyQQ3Proto.CHATRECORD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyQQ3Proto.CHATRECORD)
    MergeFrom(*source);
  }
}

void CHATRECORD::MergeFrom(const CHATRECORD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyQQ3Proto.CHATRECORD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.usersenderid().size() > 0) {
    _internal_set_usersenderid(from._internal_usersenderid());
  }
  if (from.usersendername().size() > 0) {
    _internal_set_usersendername(from._internal_usersendername());
  }
  if (from.userreceiverid().size() > 0) {
    _internal_set_userreceiverid(from._internal_userreceiverid());
  }
  if (from.userreceivername().size() > 0) {
    _internal_set_userreceivername(from._internal_userreceivername());
  }
  if (from.chatrecordsendtimestamp().size() > 0) {
    _internal_set_chatrecordsendtimestamp(from._internal_chatrecordsendtimestamp());
  }
  if (from.chatrecordserverreceivertimestamp().size() > 0) {
    _internal_set_chatrecordserverreceivertimestamp(from._internal_chatrecordserverreceivertimestamp());
  }
  if (from.chatrecordserversendtimestamp().size() > 0) {
    _internal_set_chatrecordserversendtimestamp(from._internal_chatrecordserversendtimestamp());
  }
  if (from.chatrecordreceivetimestamp().size() > 0) {
    _internal_set_chatrecordreceivetimestamp(from._internal_chatrecordreceivetimestamp());
  }
  if (from.remark().size() > 0) {
    _internal_set_remark(from._internal_remark());
  }
  if (from.has_file()) {
    _internal_mutable_file()->::MyQQ3Proto::FILE::MergeFrom(from._internal_file());
  }
  if (from.has_link()) {
    _internal_mutable_link()->::MyQQ3Proto::LINK::MergeFrom(from._internal_link());
  }
  if (from.chatrecordtype() != 0) {
    _internal_set_chatrecordtype(from._internal_chatrecordtype());
  }
}

void CHATRECORD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyQQ3Proto.CHATRECORD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHATRECORD::CopyFrom(const CHATRECORD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyQQ3Proto.CHATRECORD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHATRECORD::IsInitialized() const {
  return true;
}

void CHATRECORD::InternalSwap(CHATRECORD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  usersenderid_.Swap(&other->usersenderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  usersendername_.Swap(&other->usersendername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userreceiverid_.Swap(&other->userreceiverid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  userreceivername_.Swap(&other->userreceivername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chatrecordsendtimestamp_.Swap(&other->chatrecordsendtimestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chatrecordserverreceivertimestamp_.Swap(&other->chatrecordserverreceivertimestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chatrecordserversendtimestamp_.Swap(&other->chatrecordserversendtimestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  chatrecordreceivetimestamp_.Swap(&other->chatrecordreceivetimestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  remark_.Swap(&other->remark_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CHATRECORD, chatrecordtype_)
      + sizeof(CHATRECORD::chatrecordtype_)
      - PROTOBUF_FIELD_OFFSET(CHATRECORD, file_)>(
          reinterpret_cast<char*>(&file_),
          reinterpret_cast<char*>(&other->file_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CHATRECORD::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MyQQ3Proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MyQQ3Proto::C2S_LOGIN* Arena::CreateMaybeMessage< ::MyQQ3Proto::C2S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyQQ3Proto::C2S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::MyQQ3Proto::S2C_LOGINRET* Arena::CreateMaybeMessage< ::MyQQ3Proto::S2C_LOGINRET >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyQQ3Proto::S2C_LOGINRET >(arena);
}
template<> PROTOBUF_NOINLINE ::MyQQ3Proto::USER_USERID_USERNAME* Arena::CreateMaybeMessage< ::MyQQ3Proto::USER_USERID_USERNAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyQQ3Proto::USER_USERID_USERNAME >(arena);
}
template<> PROTOBUF_NOINLINE ::MyQQ3Proto::C2S_GETALLFRIENDS* Arena::CreateMaybeMessage< ::MyQQ3Proto::C2S_GETALLFRIENDS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyQQ3Proto::C2S_GETALLFRIENDS >(arena);
}
template<> PROTOBUF_NOINLINE ::MyQQ3Proto::S2C_GETALLFRIENDSRET* Arena::CreateMaybeMessage< ::MyQQ3Proto::S2C_GETALLFRIENDSRET >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyQQ3Proto::S2C_GETALLFRIENDSRET >(arena);
}
template<> PROTOBUF_NOINLINE ::MyQQ3Proto::FILE* Arena::CreateMaybeMessage< ::MyQQ3Proto::FILE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyQQ3Proto::FILE >(arena);
}
template<> PROTOBUF_NOINLINE ::MyQQ3Proto::LINK* Arena::CreateMaybeMessage< ::MyQQ3Proto::LINK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyQQ3Proto::LINK >(arena);
}
template<> PROTOBUF_NOINLINE ::MyQQ3Proto::CHATRECORD* Arena::CreateMaybeMessage< ::MyQQ3Proto::CHATRECORD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyQQ3Proto::CHATRECORD >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
