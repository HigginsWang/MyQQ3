// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2eproto;
namespace MyQQ3Proto {
class C2S_GETALLFRIENDS;
class C2S_GETALLFRIENDSDefaultTypeInternal;
extern C2S_GETALLFRIENDSDefaultTypeInternal _C2S_GETALLFRIENDS_default_instance_;
class C2S_LOGIN;
class C2S_LOGINDefaultTypeInternal;
extern C2S_LOGINDefaultTypeInternal _C2S_LOGIN_default_instance_;
class CHATRECORD;
class CHATRECORDDefaultTypeInternal;
extern CHATRECORDDefaultTypeInternal _CHATRECORD_default_instance_;
class FILE;
class FILEDefaultTypeInternal;
extern FILEDefaultTypeInternal _FILE_default_instance_;
class LINK;
class LINKDefaultTypeInternal;
extern LINKDefaultTypeInternal _LINK_default_instance_;
class S2C_GETALLFRIENDSRET;
class S2C_GETALLFRIENDSRETDefaultTypeInternal;
extern S2C_GETALLFRIENDSRETDefaultTypeInternal _S2C_GETALLFRIENDSRET_default_instance_;
class S2C_LOGINRET;
class S2C_LOGINRETDefaultTypeInternal;
extern S2C_LOGINRETDefaultTypeInternal _S2C_LOGINRET_default_instance_;
class USER_USERID_USERNAME;
class USER_USERID_USERNAMEDefaultTypeInternal;
extern USER_USERID_USERNAMEDefaultTypeInternal _USER_USERID_USERNAME_default_instance_;
}  // namespace MyQQ3Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::MyQQ3Proto::C2S_GETALLFRIENDS* Arena::CreateMaybeMessage<::MyQQ3Proto::C2S_GETALLFRIENDS>(Arena*);
template<> ::MyQQ3Proto::C2S_LOGIN* Arena::CreateMaybeMessage<::MyQQ3Proto::C2S_LOGIN>(Arena*);
template<> ::MyQQ3Proto::CHATRECORD* Arena::CreateMaybeMessage<::MyQQ3Proto::CHATRECORD>(Arena*);
template<> ::MyQQ3Proto::FILE* Arena::CreateMaybeMessage<::MyQQ3Proto::FILE>(Arena*);
template<> ::MyQQ3Proto::LINK* Arena::CreateMaybeMessage<::MyQQ3Proto::LINK>(Arena*);
template<> ::MyQQ3Proto::S2C_GETALLFRIENDSRET* Arena::CreateMaybeMessage<::MyQQ3Proto::S2C_GETALLFRIENDSRET>(Arena*);
template<> ::MyQQ3Proto::S2C_LOGINRET* Arena::CreateMaybeMessage<::MyQQ3Proto::S2C_LOGINRET>(Arena*);
template<> ::MyQQ3Proto::USER_USERID_USERNAME* Arena::CreateMaybeMessage<::MyQQ3Proto::USER_USERID_USERNAME>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MyQQ3Proto {

enum CHATRECORD_CHATRECORDTYPE : int {
  CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_TEXTPLUSEMOJO = 0,
  CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_IMAGE = 1,
  CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_VIDEO = 2,
  CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_OTHERFILE = 3,
  CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_LINK = 4,
  CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_VOICE = 5,
  CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_OTHER = 6,
  CHATRECORD_CHATRECORDTYPE_CHATRECORD_CHATRECORDTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CHATRECORD_CHATRECORDTYPE_CHATRECORD_CHATRECORDTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CHATRECORD_CHATRECORDTYPE_IsValid(int value);
constexpr CHATRECORD_CHATRECORDTYPE CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_MIN = CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_TEXTPLUSEMOJO;
constexpr CHATRECORD_CHATRECORDTYPE CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_MAX = CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_OTHER;
constexpr int CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_ARRAYSIZE = CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHATRECORD_CHATRECORDTYPE_descriptor();
template<typename T>
inline const std::string& CHATRECORD_CHATRECORDTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CHATRECORD_CHATRECORDTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CHATRECORD_CHATRECORDTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CHATRECORD_CHATRECORDTYPE_descriptor(), enum_t_value);
}
inline bool CHATRECORD_CHATRECORDTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CHATRECORD_CHATRECORDTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CHATRECORD_CHATRECORDTYPE>(
    CHATRECORD_CHATRECORDTYPE_descriptor(), name, value);
}
// ===================================================================

class C2S_LOGIN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyQQ3Proto.C2S_LOGIN) */ {
 public:
  inline C2S_LOGIN() : C2S_LOGIN(nullptr) {};
  virtual ~C2S_LOGIN();

  C2S_LOGIN(const C2S_LOGIN& from);
  C2S_LOGIN(C2S_LOGIN&& from) noexcept
    : C2S_LOGIN() {
    *this = ::std::move(from);
  }

  inline C2S_LOGIN& operator=(const C2S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LOGIN& operator=(C2S_LOGIN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_LOGIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C2S_LOGIN*>(
               &_C2S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2S_LOGIN& a, C2S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LOGIN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_LOGIN* New() const final {
    return CreateMaybeMessage<C2S_LOGIN>(nullptr);
  }

  C2S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_LOGIN& from);
  void MergeFrom(const C2S_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyQQ3Proto.C2S_LOGIN";
  }
  protected:
  explicit C2S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:MyQQ3Proto.C2S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class S2C_LOGINRET PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyQQ3Proto.S2C_LOGINRET) */ {
 public:
  inline S2C_LOGINRET() : S2C_LOGINRET(nullptr) {};
  virtual ~S2C_LOGINRET();

  S2C_LOGINRET(const S2C_LOGINRET& from);
  S2C_LOGINRET(S2C_LOGINRET&& from) noexcept
    : S2C_LOGINRET() {
    *this = ::std::move(from);
  }

  inline S2C_LOGINRET& operator=(const S2C_LOGINRET& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LOGINRET& operator=(S2C_LOGINRET&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_LOGINRET& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_LOGINRET* internal_default_instance() {
    return reinterpret_cast<const S2C_LOGINRET*>(
               &_S2C_LOGINRET_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S2C_LOGINRET& a, S2C_LOGINRET& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LOGINRET* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LOGINRET* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_LOGINRET* New() const final {
    return CreateMaybeMessage<S2C_LOGINRET>(nullptr);
  }

  S2C_LOGINRET* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_LOGINRET>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_LOGINRET& from);
  void MergeFrom(const S2C_LOGINRET& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LOGINRET* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyQQ3Proto.S2C_LOGINRET";
  }
  protected:
  explicit S2C_LOGINRET(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kIfLoginFieldNumber = 1,
  };
  // string userid = 2;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // int32 ifLogin = 1;
  void clear_iflogin();
  ::PROTOBUF_NAMESPACE_ID::int32 iflogin() const;
  void set_iflogin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iflogin() const;
  void _internal_set_iflogin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MyQQ3Proto.S2C_LOGINRET)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::int32 iflogin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class USER_USERID_USERNAME PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyQQ3Proto.USER_USERID_USERNAME) */ {
 public:
  inline USER_USERID_USERNAME() : USER_USERID_USERNAME(nullptr) {};
  virtual ~USER_USERID_USERNAME();

  USER_USERID_USERNAME(const USER_USERID_USERNAME& from);
  USER_USERID_USERNAME(USER_USERID_USERNAME&& from) noexcept
    : USER_USERID_USERNAME() {
    *this = ::std::move(from);
  }

  inline USER_USERID_USERNAME& operator=(const USER_USERID_USERNAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline USER_USERID_USERNAME& operator=(USER_USERID_USERNAME&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USER_USERID_USERNAME& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USER_USERID_USERNAME* internal_default_instance() {
    return reinterpret_cast<const USER_USERID_USERNAME*>(
               &_USER_USERID_USERNAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(USER_USERID_USERNAME& a, USER_USERID_USERNAME& b) {
    a.Swap(&b);
  }
  inline void Swap(USER_USERID_USERNAME* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USER_USERID_USERNAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USER_USERID_USERNAME* New() const final {
    return CreateMaybeMessage<USER_USERID_USERNAME>(nullptr);
  }

  USER_USERID_USERNAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USER_USERID_USERNAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USER_USERID_USERNAME& from);
  void MergeFrom(const USER_USERID_USERNAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USER_USERID_USERNAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyQQ3Proto.USER_USERID_USERNAME";
  }
  protected:
  explicit USER_USERID_USERNAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
    kUsernameFieldNumber = 2,
  };
  // string userid = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:MyQQ3Proto.USER_USERID_USERNAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class C2S_GETALLFRIENDS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyQQ3Proto.C2S_GETALLFRIENDS) */ {
 public:
  inline C2S_GETALLFRIENDS() : C2S_GETALLFRIENDS(nullptr) {};
  virtual ~C2S_GETALLFRIENDS();

  C2S_GETALLFRIENDS(const C2S_GETALLFRIENDS& from);
  C2S_GETALLFRIENDS(C2S_GETALLFRIENDS&& from) noexcept
    : C2S_GETALLFRIENDS() {
    *this = ::std::move(from);
  }

  inline C2S_GETALLFRIENDS& operator=(const C2S_GETALLFRIENDS& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_GETALLFRIENDS& operator=(C2S_GETALLFRIENDS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C2S_GETALLFRIENDS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const C2S_GETALLFRIENDS* internal_default_instance() {
    return reinterpret_cast<const C2S_GETALLFRIENDS*>(
               &_C2S_GETALLFRIENDS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C2S_GETALLFRIENDS& a, C2S_GETALLFRIENDS& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_GETALLFRIENDS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_GETALLFRIENDS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C2S_GETALLFRIENDS* New() const final {
    return CreateMaybeMessage<C2S_GETALLFRIENDS>(nullptr);
  }

  C2S_GETALLFRIENDS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C2S_GETALLFRIENDS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C2S_GETALLFRIENDS& from);
  void MergeFrom(const C2S_GETALLFRIENDS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_GETALLFRIENDS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyQQ3Proto.C2S_GETALLFRIENDS";
  }
  protected:
  explicit C2S_GETALLFRIENDS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // string userid = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // @@protoc_insertion_point(class_scope:MyQQ3Proto.C2S_GETALLFRIENDS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class S2C_GETALLFRIENDSRET PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyQQ3Proto.S2C_GETALLFRIENDSRET) */ {
 public:
  inline S2C_GETALLFRIENDSRET() : S2C_GETALLFRIENDSRET(nullptr) {};
  virtual ~S2C_GETALLFRIENDSRET();

  S2C_GETALLFRIENDSRET(const S2C_GETALLFRIENDSRET& from);
  S2C_GETALLFRIENDSRET(S2C_GETALLFRIENDSRET&& from) noexcept
    : S2C_GETALLFRIENDSRET() {
    *this = ::std::move(from);
  }

  inline S2C_GETALLFRIENDSRET& operator=(const S2C_GETALLFRIENDSRET& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GETALLFRIENDSRET& operator=(S2C_GETALLFRIENDSRET&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S2C_GETALLFRIENDSRET& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2C_GETALLFRIENDSRET* internal_default_instance() {
    return reinterpret_cast<const S2C_GETALLFRIENDSRET*>(
               &_S2C_GETALLFRIENDSRET_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S2C_GETALLFRIENDSRET& a, S2C_GETALLFRIENDSRET& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_GETALLFRIENDSRET* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GETALLFRIENDSRET* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S2C_GETALLFRIENDSRET* New() const final {
    return CreateMaybeMessage<S2C_GETALLFRIENDSRET>(nullptr);
  }

  S2C_GETALLFRIENDSRET* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S2C_GETALLFRIENDSRET>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S2C_GETALLFRIENDSRET& from);
  void MergeFrom(const S2C_GETALLFRIENDSRET& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_GETALLFRIENDSRET* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyQQ3Proto.S2C_GETALLFRIENDSRET";
  }
  protected:
  explicit S2C_GETALLFRIENDSRET(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 3,
    kUseridFieldNumber = 1,
    kUsernameFieldNumber = 2,
  };
  // repeated .MyQQ3Proto.USER_USERID_USERNAME friends = 3;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::MyQQ3Proto::USER_USERID_USERNAME* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MyQQ3Proto::USER_USERID_USERNAME >*
      mutable_friends();
  private:
  const ::MyQQ3Proto::USER_USERID_USERNAME& _internal_friends(int index) const;
  ::MyQQ3Proto::USER_USERID_USERNAME* _internal_add_friends();
  public:
  const ::MyQQ3Proto::USER_USERID_USERNAME& friends(int index) const;
  ::MyQQ3Proto::USER_USERID_USERNAME* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MyQQ3Proto::USER_USERID_USERNAME >&
      friends() const;

  // string userid = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:MyQQ3Proto.S2C_GETALLFRIENDSRET)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MyQQ3Proto::USER_USERID_USERNAME > friends_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class FILE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyQQ3Proto.FILE) */ {
 public:
  inline FILE() : FILE(nullptr) {};
  virtual ~FILE();

  FILE(const FILE& from);
  FILE(FILE&& from) noexcept
    : FILE() {
    *this = ::std::move(from);
  }

  inline FILE& operator=(const FILE& from) {
    CopyFrom(from);
    return *this;
  }
  inline FILE& operator=(FILE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FILE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FILE* internal_default_instance() {
    return reinterpret_cast<const FILE*>(
               &_FILE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FILE& a, FILE& b) {
    a.Swap(&b);
  }
  inline void Swap(FILE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FILE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FILE* New() const final {
    return CreateMaybeMessage<FILE>(nullptr);
  }

  FILE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FILE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FILE& from);
  void MergeFrom(const FILE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FILE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyQQ3Proto.FILE";
  }
  protected:
  explicit FILE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kFilebytesFieldNumber = 3,
    kFilesizeFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // bytes filebytes = 3;
  void clear_filebytes();
  const std::string& filebytes() const;
  void set_filebytes(const std::string& value);
  void set_filebytes(std::string&& value);
  void set_filebytes(const char* value);
  void set_filebytes(const void* value, size_t size);
  std::string* mutable_filebytes();
  std::string* release_filebytes();
  void set_allocated_filebytes(std::string* filebytes);
  private:
  const std::string& _internal_filebytes() const;
  void _internal_set_filebytes(const std::string& value);
  std::string* _internal_mutable_filebytes();
  public:

  // int64 filesize = 2;
  void clear_filesize();
  ::PROTOBUF_NAMESPACE_ID::int64 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_filesize() const;
  void _internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:MyQQ3Proto.FILE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filebytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 filesize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class LINK PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyQQ3Proto.LINK) */ {
 public:
  inline LINK() : LINK(nullptr) {};
  virtual ~LINK();

  LINK(const LINK& from);
  LINK(LINK&& from) noexcept
    : LINK() {
    *this = ::std::move(from);
  }

  inline LINK& operator=(const LINK& from) {
    CopyFrom(from);
    return *this;
  }
  inline LINK& operator=(LINK&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LINK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LINK* internal_default_instance() {
    return reinterpret_cast<const LINK*>(
               &_LINK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LINK& a, LINK& b) {
    a.Swap(&b);
  }
  inline void Swap(LINK* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LINK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LINK* New() const final {
    return CreateMaybeMessage<LINK>(nullptr);
  }

  LINK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LINK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LINK& from);
  void MergeFrom(const LINK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LINK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyQQ3Proto.LINK";
  }
  protected:
  explicit LINK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinkstringFieldNumber = 1,
  };
  // string linkstring = 1;
  void clear_linkstring();
  const std::string& linkstring() const;
  void set_linkstring(const std::string& value);
  void set_linkstring(std::string&& value);
  void set_linkstring(const char* value);
  void set_linkstring(const char* value, size_t size);
  std::string* mutable_linkstring();
  std::string* release_linkstring();
  void set_allocated_linkstring(std::string* linkstring);
  private:
  const std::string& _internal_linkstring() const;
  void _internal_set_linkstring(const std::string& value);
  std::string* _internal_mutable_linkstring();
  public:

  // @@protoc_insertion_point(class_scope:MyQQ3Proto.LINK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr linkstring_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// -------------------------------------------------------------------

class CHATRECORD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MyQQ3Proto.CHATRECORD) */ {
 public:
  inline CHATRECORD() : CHATRECORD(nullptr) {};
  virtual ~CHATRECORD();

  CHATRECORD(const CHATRECORD& from);
  CHATRECORD(CHATRECORD&& from) noexcept
    : CHATRECORD() {
    *this = ::std::move(from);
  }

  inline CHATRECORD& operator=(const CHATRECORD& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHATRECORD& operator=(CHATRECORD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHATRECORD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHATRECORD* internal_default_instance() {
    return reinterpret_cast<const CHATRECORD*>(
               &_CHATRECORD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CHATRECORD& a, CHATRECORD& b) {
    a.Swap(&b);
  }
  inline void Swap(CHATRECORD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CHATRECORD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHATRECORD* New() const final {
    return CreateMaybeMessage<CHATRECORD>(nullptr);
  }

  CHATRECORD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHATRECORD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHATRECORD& from);
  void MergeFrom(const CHATRECORD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHATRECORD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MyQQ3Proto.CHATRECORD";
  }
  protected:
  explicit CHATRECORD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2eproto);
    return ::descriptor_table_proto_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CHATRECORD_CHATRECORDTYPE CHATRECORDTYPE;
  static constexpr CHATRECORDTYPE CHATRECORDTYPE_TEXTPLUSEMOJO =
    CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_TEXTPLUSEMOJO;
  static constexpr CHATRECORDTYPE CHATRECORDTYPE_IMAGE =
    CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_IMAGE;
  static constexpr CHATRECORDTYPE CHATRECORDTYPE_VIDEO =
    CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_VIDEO;
  static constexpr CHATRECORDTYPE CHATRECORDTYPE_OTHERFILE =
    CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_OTHERFILE;
  static constexpr CHATRECORDTYPE CHATRECORDTYPE_LINK =
    CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_LINK;
  static constexpr CHATRECORDTYPE CHATRECORDTYPE_VOICE =
    CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_VOICE;
  static constexpr CHATRECORDTYPE CHATRECORDTYPE_OTHER =
    CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_OTHER;
  static inline bool CHATRECORDTYPE_IsValid(int value) {
    return CHATRECORD_CHATRECORDTYPE_IsValid(value);
  }
  static constexpr CHATRECORDTYPE CHATRECORDTYPE_MIN =
    CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_MIN;
  static constexpr CHATRECORDTYPE CHATRECORDTYPE_MAX =
    CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_MAX;
  static constexpr int CHATRECORDTYPE_ARRAYSIZE =
    CHATRECORD_CHATRECORDTYPE_CHATRECORDTYPE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CHATRECORDTYPE_descriptor() {
    return CHATRECORD_CHATRECORDTYPE_descriptor();
  }
  template<typename T>
  static inline const std::string& CHATRECORDTYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CHATRECORDTYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CHATRECORDTYPE_Name.");
    return CHATRECORD_CHATRECORDTYPE_Name(enum_t_value);
  }
  static inline bool CHATRECORDTYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CHATRECORDTYPE* value) {
    return CHATRECORD_CHATRECORDTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 2,
    kUuidFieldNumber = 5,
    kUsersenderidFieldNumber = 6,
    kUsersendernameFieldNumber = 7,
    kUserreceiveridFieldNumber = 8,
    kUserreceivernameFieldNumber = 9,
    kChatrecordsendtimestampFieldNumber = 10,
    kChatrecordserverreceivertimestampFieldNumber = 11,
    kChatrecordserversendtimestampFieldNumber = 12,
    kChatrecordreceivetimestampFieldNumber = 13,
    kRemarkFieldNumber = 14,
    kFileFieldNumber = 3,
    kLinkFieldNumber = 4,
    kChatrecordtypeFieldNumber = 1,
  };
  // string content = 2;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string uuid = 5;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string usersenderid = 6;
  void clear_usersenderid();
  const std::string& usersenderid() const;
  void set_usersenderid(const std::string& value);
  void set_usersenderid(std::string&& value);
  void set_usersenderid(const char* value);
  void set_usersenderid(const char* value, size_t size);
  std::string* mutable_usersenderid();
  std::string* release_usersenderid();
  void set_allocated_usersenderid(std::string* usersenderid);
  private:
  const std::string& _internal_usersenderid() const;
  void _internal_set_usersenderid(const std::string& value);
  std::string* _internal_mutable_usersenderid();
  public:

  // string usersendername = 7;
  void clear_usersendername();
  const std::string& usersendername() const;
  void set_usersendername(const std::string& value);
  void set_usersendername(std::string&& value);
  void set_usersendername(const char* value);
  void set_usersendername(const char* value, size_t size);
  std::string* mutable_usersendername();
  std::string* release_usersendername();
  void set_allocated_usersendername(std::string* usersendername);
  private:
  const std::string& _internal_usersendername() const;
  void _internal_set_usersendername(const std::string& value);
  std::string* _internal_mutable_usersendername();
  public:

  // string userreceiverid = 8;
  void clear_userreceiverid();
  const std::string& userreceiverid() const;
  void set_userreceiverid(const std::string& value);
  void set_userreceiverid(std::string&& value);
  void set_userreceiverid(const char* value);
  void set_userreceiverid(const char* value, size_t size);
  std::string* mutable_userreceiverid();
  std::string* release_userreceiverid();
  void set_allocated_userreceiverid(std::string* userreceiverid);
  private:
  const std::string& _internal_userreceiverid() const;
  void _internal_set_userreceiverid(const std::string& value);
  std::string* _internal_mutable_userreceiverid();
  public:

  // string userreceivername = 9;
  void clear_userreceivername();
  const std::string& userreceivername() const;
  void set_userreceivername(const std::string& value);
  void set_userreceivername(std::string&& value);
  void set_userreceivername(const char* value);
  void set_userreceivername(const char* value, size_t size);
  std::string* mutable_userreceivername();
  std::string* release_userreceivername();
  void set_allocated_userreceivername(std::string* userreceivername);
  private:
  const std::string& _internal_userreceivername() const;
  void _internal_set_userreceivername(const std::string& value);
  std::string* _internal_mutable_userreceivername();
  public:

  // string chatrecordsendtimestamp = 10;
  void clear_chatrecordsendtimestamp();
  const std::string& chatrecordsendtimestamp() const;
  void set_chatrecordsendtimestamp(const std::string& value);
  void set_chatrecordsendtimestamp(std::string&& value);
  void set_chatrecordsendtimestamp(const char* value);
  void set_chatrecordsendtimestamp(const char* value, size_t size);
  std::string* mutable_chatrecordsendtimestamp();
  std::string* release_chatrecordsendtimestamp();
  void set_allocated_chatrecordsendtimestamp(std::string* chatrecordsendtimestamp);
  private:
  const std::string& _internal_chatrecordsendtimestamp() const;
  void _internal_set_chatrecordsendtimestamp(const std::string& value);
  std::string* _internal_mutable_chatrecordsendtimestamp();
  public:

  // string chatrecordserverreceivertimestamp = 11;
  void clear_chatrecordserverreceivertimestamp();
  const std::string& chatrecordserverreceivertimestamp() const;
  void set_chatrecordserverreceivertimestamp(const std::string& value);
  void set_chatrecordserverreceivertimestamp(std::string&& value);
  void set_chatrecordserverreceivertimestamp(const char* value);
  void set_chatrecordserverreceivertimestamp(const char* value, size_t size);
  std::string* mutable_chatrecordserverreceivertimestamp();
  std::string* release_chatrecordserverreceivertimestamp();
  void set_allocated_chatrecordserverreceivertimestamp(std::string* chatrecordserverreceivertimestamp);
  private:
  const std::string& _internal_chatrecordserverreceivertimestamp() const;
  void _internal_set_chatrecordserverreceivertimestamp(const std::string& value);
  std::string* _internal_mutable_chatrecordserverreceivertimestamp();
  public:

  // string chatrecordserversendtimestamp = 12;
  void clear_chatrecordserversendtimestamp();
  const std::string& chatrecordserversendtimestamp() const;
  void set_chatrecordserversendtimestamp(const std::string& value);
  void set_chatrecordserversendtimestamp(std::string&& value);
  void set_chatrecordserversendtimestamp(const char* value);
  void set_chatrecordserversendtimestamp(const char* value, size_t size);
  std::string* mutable_chatrecordserversendtimestamp();
  std::string* release_chatrecordserversendtimestamp();
  void set_allocated_chatrecordserversendtimestamp(std::string* chatrecordserversendtimestamp);
  private:
  const std::string& _internal_chatrecordserversendtimestamp() const;
  void _internal_set_chatrecordserversendtimestamp(const std::string& value);
  std::string* _internal_mutable_chatrecordserversendtimestamp();
  public:

  // string chatrecordreceivetimestamp = 13;
  void clear_chatrecordreceivetimestamp();
  const std::string& chatrecordreceivetimestamp() const;
  void set_chatrecordreceivetimestamp(const std::string& value);
  void set_chatrecordreceivetimestamp(std::string&& value);
  void set_chatrecordreceivetimestamp(const char* value);
  void set_chatrecordreceivetimestamp(const char* value, size_t size);
  std::string* mutable_chatrecordreceivetimestamp();
  std::string* release_chatrecordreceivetimestamp();
  void set_allocated_chatrecordreceivetimestamp(std::string* chatrecordreceivetimestamp);
  private:
  const std::string& _internal_chatrecordreceivetimestamp() const;
  void _internal_set_chatrecordreceivetimestamp(const std::string& value);
  std::string* _internal_mutable_chatrecordreceivetimestamp();
  public:

  // string remark = 14;
  void clear_remark();
  const std::string& remark() const;
  void set_remark(const std::string& value);
  void set_remark(std::string&& value);
  void set_remark(const char* value);
  void set_remark(const char* value, size_t size);
  std::string* mutable_remark();
  std::string* release_remark();
  void set_allocated_remark(std::string* remark);
  private:
  const std::string& _internal_remark() const;
  void _internal_set_remark(const std::string& value);
  std::string* _internal_mutable_remark();
  public:

  // .MyQQ3Proto.FILE file = 3;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::MyQQ3Proto::FILE& file() const;
  ::MyQQ3Proto::FILE* release_file();
  ::MyQQ3Proto::FILE* mutable_file();
  void set_allocated_file(::MyQQ3Proto::FILE* file);
  private:
  const ::MyQQ3Proto::FILE& _internal_file() const;
  ::MyQQ3Proto::FILE* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::MyQQ3Proto::FILE* file);
  ::MyQQ3Proto::FILE* unsafe_arena_release_file();

  // .MyQQ3Proto.LINK link = 4;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::MyQQ3Proto::LINK& link() const;
  ::MyQQ3Proto::LINK* release_link();
  ::MyQQ3Proto::LINK* mutable_link();
  void set_allocated_link(::MyQQ3Proto::LINK* link);
  private:
  const ::MyQQ3Proto::LINK& _internal_link() const;
  ::MyQQ3Proto::LINK* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::MyQQ3Proto::LINK* link);
  ::MyQQ3Proto::LINK* unsafe_arena_release_link();

  // .MyQQ3Proto.CHATRECORD.CHATRECORDTYPE chatrecordtype = 1;
  void clear_chatrecordtype();
  ::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE chatrecordtype() const;
  void set_chatrecordtype(::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE value);
  private:
  ::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE _internal_chatrecordtype() const;
  void _internal_set_chatrecordtype(::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:MyQQ3Proto.CHATRECORD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersenderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersendername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userreceiverid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userreceivername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatrecordsendtimestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatrecordserverreceivertimestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatrecordserversendtimestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatrecordreceivetimestamp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remark_;
  ::MyQQ3Proto::FILE* file_;
  ::MyQQ3Proto::LINK* link_;
  int chatrecordtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2S_LOGIN

// string name = 1;
inline void C2S_LOGIN::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& C2S_LOGIN::name() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.C2S_LOGIN.name)
  return _internal_name();
}
inline void C2S_LOGIN::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.C2S_LOGIN.name)
}
inline std::string* C2S_LOGIN::mutable_name() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.C2S_LOGIN.name)
  return _internal_mutable_name();
}
inline const std::string& C2S_LOGIN::_internal_name() const {
  return name_.Get();
}
inline void C2S_LOGIN::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void C2S_LOGIN::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.C2S_LOGIN.name)
}
inline void C2S_LOGIN::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.C2S_LOGIN.name)
}
inline void C2S_LOGIN::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.C2S_LOGIN.name)
}
inline std::string* C2S_LOGIN::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* C2S_LOGIN::release_name() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.C2S_LOGIN.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void C2S_LOGIN::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.C2S_LOGIN.name)
}

// string password = 2;
inline void C2S_LOGIN::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& C2S_LOGIN::password() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.C2S_LOGIN.password)
  return _internal_password();
}
inline void C2S_LOGIN::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.C2S_LOGIN.password)
}
inline std::string* C2S_LOGIN::mutable_password() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.C2S_LOGIN.password)
  return _internal_mutable_password();
}
inline const std::string& C2S_LOGIN::_internal_password() const {
  return password_.Get();
}
inline void C2S_LOGIN::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void C2S_LOGIN::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.C2S_LOGIN.password)
}
inline void C2S_LOGIN::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.C2S_LOGIN.password)
}
inline void C2S_LOGIN::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.C2S_LOGIN.password)
}
inline std::string* C2S_LOGIN::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* C2S_LOGIN::release_password() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.C2S_LOGIN.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void C2S_LOGIN::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.C2S_LOGIN.password)
}

// -------------------------------------------------------------------

// S2C_LOGINRET

// int32 ifLogin = 1;
inline void S2C_LOGINRET::clear_iflogin() {
  iflogin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LOGINRET::_internal_iflogin() const {
  return iflogin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S2C_LOGINRET::iflogin() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.S2C_LOGINRET.ifLogin)
  return _internal_iflogin();
}
inline void S2C_LOGINRET::_internal_set_iflogin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iflogin_ = value;
}
inline void S2C_LOGINRET::set_iflogin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iflogin(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.S2C_LOGINRET.ifLogin)
}

// string userid = 2;
inline void S2C_LOGINRET::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& S2C_LOGINRET::userid() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.S2C_LOGINRET.userid)
  return _internal_userid();
}
inline void S2C_LOGINRET::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.S2C_LOGINRET.userid)
}
inline std::string* S2C_LOGINRET::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.S2C_LOGINRET.userid)
  return _internal_mutable_userid();
}
inline const std::string& S2C_LOGINRET::_internal_userid() const {
  return userid_.Get();
}
inline void S2C_LOGINRET::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void S2C_LOGINRET::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.S2C_LOGINRET.userid)
}
inline void S2C_LOGINRET::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.S2C_LOGINRET.userid)
}
inline void S2C_LOGINRET::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.S2C_LOGINRET.userid)
}
inline std::string* S2C_LOGINRET::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* S2C_LOGINRET::release_userid() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.S2C_LOGINRET.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void S2C_LOGINRET::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.S2C_LOGINRET.userid)
}

// string username = 3;
inline void S2C_LOGINRET::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& S2C_LOGINRET::username() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.S2C_LOGINRET.username)
  return _internal_username();
}
inline void S2C_LOGINRET::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.S2C_LOGINRET.username)
}
inline std::string* S2C_LOGINRET::mutable_username() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.S2C_LOGINRET.username)
  return _internal_mutable_username();
}
inline const std::string& S2C_LOGINRET::_internal_username() const {
  return username_.Get();
}
inline void S2C_LOGINRET::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void S2C_LOGINRET::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.S2C_LOGINRET.username)
}
inline void S2C_LOGINRET::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.S2C_LOGINRET.username)
}
inline void S2C_LOGINRET::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.S2C_LOGINRET.username)
}
inline std::string* S2C_LOGINRET::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* S2C_LOGINRET::release_username() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.S2C_LOGINRET.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void S2C_LOGINRET::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.S2C_LOGINRET.username)
}

// -------------------------------------------------------------------

// USER_USERID_USERNAME

// string userid = 1;
inline void USER_USERID_USERNAME::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USER_USERID_USERNAME::userid() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.USER_USERID_USERNAME.userid)
  return _internal_userid();
}
inline void USER_USERID_USERNAME::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.USER_USERID_USERNAME.userid)
}
inline std::string* USER_USERID_USERNAME::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.USER_USERID_USERNAME.userid)
  return _internal_mutable_userid();
}
inline const std::string& USER_USERID_USERNAME::_internal_userid() const {
  return userid_.Get();
}
inline void USER_USERID_USERNAME::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USER_USERID_USERNAME::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.USER_USERID_USERNAME.userid)
}
inline void USER_USERID_USERNAME::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.USER_USERID_USERNAME.userid)
}
inline void USER_USERID_USERNAME::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.USER_USERID_USERNAME.userid)
}
inline std::string* USER_USERID_USERNAME::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USER_USERID_USERNAME::release_userid() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.USER_USERID_USERNAME.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USER_USERID_USERNAME::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.USER_USERID_USERNAME.userid)
}

// string username = 2;
inline void USER_USERID_USERNAME::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& USER_USERID_USERNAME::username() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.USER_USERID_USERNAME.username)
  return _internal_username();
}
inline void USER_USERID_USERNAME::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.USER_USERID_USERNAME.username)
}
inline std::string* USER_USERID_USERNAME::mutable_username() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.USER_USERID_USERNAME.username)
  return _internal_mutable_username();
}
inline const std::string& USER_USERID_USERNAME::_internal_username() const {
  return username_.Get();
}
inline void USER_USERID_USERNAME::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void USER_USERID_USERNAME::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.USER_USERID_USERNAME.username)
}
inline void USER_USERID_USERNAME::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.USER_USERID_USERNAME.username)
}
inline void USER_USERID_USERNAME::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.USER_USERID_USERNAME.username)
}
inline std::string* USER_USERID_USERNAME::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* USER_USERID_USERNAME::release_username() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.USER_USERID_USERNAME.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void USER_USERID_USERNAME::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.USER_USERID_USERNAME.username)
}

// -------------------------------------------------------------------

// C2S_GETALLFRIENDS

// string userid = 1;
inline void C2S_GETALLFRIENDS::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& C2S_GETALLFRIENDS::userid() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.C2S_GETALLFRIENDS.userid)
  return _internal_userid();
}
inline void C2S_GETALLFRIENDS::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.C2S_GETALLFRIENDS.userid)
}
inline std::string* C2S_GETALLFRIENDS::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.C2S_GETALLFRIENDS.userid)
  return _internal_mutable_userid();
}
inline const std::string& C2S_GETALLFRIENDS::_internal_userid() const {
  return userid_.Get();
}
inline void C2S_GETALLFRIENDS::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void C2S_GETALLFRIENDS::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.C2S_GETALLFRIENDS.userid)
}
inline void C2S_GETALLFRIENDS::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.C2S_GETALLFRIENDS.userid)
}
inline void C2S_GETALLFRIENDS::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.C2S_GETALLFRIENDS.userid)
}
inline std::string* C2S_GETALLFRIENDS::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* C2S_GETALLFRIENDS::release_userid() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.C2S_GETALLFRIENDS.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void C2S_GETALLFRIENDS::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.C2S_GETALLFRIENDS.userid)
}

// -------------------------------------------------------------------

// S2C_GETALLFRIENDSRET

// string userid = 1;
inline void S2C_GETALLFRIENDSRET::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& S2C_GETALLFRIENDSRET::userid() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.S2C_GETALLFRIENDSRET.userid)
  return _internal_userid();
}
inline void S2C_GETALLFRIENDSRET::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.S2C_GETALLFRIENDSRET.userid)
}
inline std::string* S2C_GETALLFRIENDSRET::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.S2C_GETALLFRIENDSRET.userid)
  return _internal_mutable_userid();
}
inline const std::string& S2C_GETALLFRIENDSRET::_internal_userid() const {
  return userid_.Get();
}
inline void S2C_GETALLFRIENDSRET::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void S2C_GETALLFRIENDSRET::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.S2C_GETALLFRIENDSRET.userid)
}
inline void S2C_GETALLFRIENDSRET::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.S2C_GETALLFRIENDSRET.userid)
}
inline void S2C_GETALLFRIENDSRET::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.S2C_GETALLFRIENDSRET.userid)
}
inline std::string* S2C_GETALLFRIENDSRET::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* S2C_GETALLFRIENDSRET::release_userid() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.S2C_GETALLFRIENDSRET.userid)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void S2C_GETALLFRIENDSRET::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.S2C_GETALLFRIENDSRET.userid)
}

// string username = 2;
inline void S2C_GETALLFRIENDSRET::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& S2C_GETALLFRIENDSRET::username() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.S2C_GETALLFRIENDSRET.username)
  return _internal_username();
}
inline void S2C_GETALLFRIENDSRET::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.S2C_GETALLFRIENDSRET.username)
}
inline std::string* S2C_GETALLFRIENDSRET::mutable_username() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.S2C_GETALLFRIENDSRET.username)
  return _internal_mutable_username();
}
inline const std::string& S2C_GETALLFRIENDSRET::_internal_username() const {
  return username_.Get();
}
inline void S2C_GETALLFRIENDSRET::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void S2C_GETALLFRIENDSRET::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.S2C_GETALLFRIENDSRET.username)
}
inline void S2C_GETALLFRIENDSRET::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.S2C_GETALLFRIENDSRET.username)
}
inline void S2C_GETALLFRIENDSRET::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.S2C_GETALLFRIENDSRET.username)
}
inline std::string* S2C_GETALLFRIENDSRET::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* S2C_GETALLFRIENDSRET::release_username() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.S2C_GETALLFRIENDSRET.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void S2C_GETALLFRIENDSRET::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.S2C_GETALLFRIENDSRET.username)
}

// repeated .MyQQ3Proto.USER_USERID_USERNAME friends = 3;
inline int S2C_GETALLFRIENDSRET::_internal_friends_size() const {
  return friends_.size();
}
inline int S2C_GETALLFRIENDSRET::friends_size() const {
  return _internal_friends_size();
}
inline void S2C_GETALLFRIENDSRET::clear_friends() {
  friends_.Clear();
}
inline ::MyQQ3Proto::USER_USERID_USERNAME* S2C_GETALLFRIENDSRET::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.S2C_GETALLFRIENDSRET.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MyQQ3Proto::USER_USERID_USERNAME >*
S2C_GETALLFRIENDSRET::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:MyQQ3Proto.S2C_GETALLFRIENDSRET.friends)
  return &friends_;
}
inline const ::MyQQ3Proto::USER_USERID_USERNAME& S2C_GETALLFRIENDSRET::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::MyQQ3Proto::USER_USERID_USERNAME& S2C_GETALLFRIENDSRET::friends(int index) const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.S2C_GETALLFRIENDSRET.friends)
  return _internal_friends(index);
}
inline ::MyQQ3Proto::USER_USERID_USERNAME* S2C_GETALLFRIENDSRET::_internal_add_friends() {
  return friends_.Add();
}
inline ::MyQQ3Proto::USER_USERID_USERNAME* S2C_GETALLFRIENDSRET::add_friends() {
  // @@protoc_insertion_point(field_add:MyQQ3Proto.S2C_GETALLFRIENDSRET.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MyQQ3Proto::USER_USERID_USERNAME >&
S2C_GETALLFRIENDSRET::friends() const {
  // @@protoc_insertion_point(field_list:MyQQ3Proto.S2C_GETALLFRIENDSRET.friends)
  return friends_;
}

// -------------------------------------------------------------------

// FILE

// string filename = 1;
inline void FILE::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FILE::filename() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.FILE.filename)
  return _internal_filename();
}
inline void FILE::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.FILE.filename)
}
inline std::string* FILE::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.FILE.filename)
  return _internal_mutable_filename();
}
inline const std::string& FILE::_internal_filename() const {
  return filename_.Get();
}
inline void FILE::_internal_set_filename(const std::string& value) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FILE::set_filename(std::string&& value) {
  
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.FILE.filename)
}
inline void FILE::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.FILE.filename)
}
inline void FILE::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.FILE.filename)
}
inline std::string* FILE::_internal_mutable_filename() {
  
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FILE::release_filename() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.FILE.filename)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FILE::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.FILE.filename)
}

// int64 filesize = 2;
inline void FILE::clear_filesize() {
  filesize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FILE::_internal_filesize() const {
  return filesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FILE::filesize() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.FILE.filesize)
  return _internal_filesize();
}
inline void FILE::_internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  filesize_ = value;
}
inline void FILE::set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.FILE.filesize)
}

// bytes filebytes = 3;
inline void FILE::clear_filebytes() {
  filebytes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FILE::filebytes() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.FILE.filebytes)
  return _internal_filebytes();
}
inline void FILE::set_filebytes(const std::string& value) {
  _internal_set_filebytes(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.FILE.filebytes)
}
inline std::string* FILE::mutable_filebytes() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.FILE.filebytes)
  return _internal_mutable_filebytes();
}
inline const std::string& FILE::_internal_filebytes() const {
  return filebytes_.Get();
}
inline void FILE::_internal_set_filebytes(const std::string& value) {
  
  filebytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FILE::set_filebytes(std::string&& value) {
  
  filebytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.FILE.filebytes)
}
inline void FILE::set_filebytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filebytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.FILE.filebytes)
}
inline void FILE::set_filebytes(const void* value,
    size_t size) {
  
  filebytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.FILE.filebytes)
}
inline std::string* FILE::_internal_mutable_filebytes() {
  
  return filebytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FILE::release_filebytes() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.FILE.filebytes)
  return filebytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FILE::set_allocated_filebytes(std::string* filebytes) {
  if (filebytes != nullptr) {
    
  } else {
    
  }
  filebytes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filebytes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.FILE.filebytes)
}

// -------------------------------------------------------------------

// LINK

// string linkstring = 1;
inline void LINK::clear_linkstring() {
  linkstring_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LINK::linkstring() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.LINK.linkstring)
  return _internal_linkstring();
}
inline void LINK::set_linkstring(const std::string& value) {
  _internal_set_linkstring(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.LINK.linkstring)
}
inline std::string* LINK::mutable_linkstring() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.LINK.linkstring)
  return _internal_mutable_linkstring();
}
inline const std::string& LINK::_internal_linkstring() const {
  return linkstring_.Get();
}
inline void LINK::_internal_set_linkstring(const std::string& value) {
  
  linkstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LINK::set_linkstring(std::string&& value) {
  
  linkstring_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.LINK.linkstring)
}
inline void LINK::set_linkstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  linkstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.LINK.linkstring)
}
inline void LINK::set_linkstring(const char* value,
    size_t size) {
  
  linkstring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.LINK.linkstring)
}
inline std::string* LINK::_internal_mutable_linkstring() {
  
  return linkstring_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LINK::release_linkstring() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.LINK.linkstring)
  return linkstring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LINK::set_allocated_linkstring(std::string* linkstring) {
  if (linkstring != nullptr) {
    
  } else {
    
  }
  linkstring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), linkstring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.LINK.linkstring)
}

// -------------------------------------------------------------------

// CHATRECORD

// .MyQQ3Proto.CHATRECORD.CHATRECORDTYPE chatrecordtype = 1;
inline void CHATRECORD::clear_chatrecordtype() {
  chatrecordtype_ = 0;
}
inline ::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE CHATRECORD::_internal_chatrecordtype() const {
  return static_cast< ::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE >(chatrecordtype_);
}
inline ::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE CHATRECORD::chatrecordtype() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.chatrecordtype)
  return _internal_chatrecordtype();
}
inline void CHATRECORD::_internal_set_chatrecordtype(::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE value) {
  
  chatrecordtype_ = value;
}
inline void CHATRECORD::set_chatrecordtype(::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE value) {
  _internal_set_chatrecordtype(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.chatrecordtype)
}

// string content = 2;
inline void CHATRECORD::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CHATRECORD::content() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.content)
  return _internal_content();
}
inline void CHATRECORD::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.content)
}
inline std::string* CHATRECORD::mutable_content() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.content)
  return _internal_mutable_content();
}
inline const std::string& CHATRECORD::_internal_content() const {
  return content_.Get();
}
inline void CHATRECORD::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CHATRECORD::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.CHATRECORD.content)
}
inline void CHATRECORD::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.CHATRECORD.content)
}
inline void CHATRECORD::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.CHATRECORD.content)
}
inline std::string* CHATRECORD::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CHATRECORD::release_content() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CHATRECORD::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.content)
}

// .MyQQ3Proto.FILE file = 3;
inline bool CHATRECORD::_internal_has_file() const {
  return this != internal_default_instance() && file_ != nullptr;
}
inline bool CHATRECORD::has_file() const {
  return _internal_has_file();
}
inline void CHATRECORD::clear_file() {
  if (GetArena() == nullptr && file_ != nullptr) {
    delete file_;
  }
  file_ = nullptr;
}
inline const ::MyQQ3Proto::FILE& CHATRECORD::_internal_file() const {
  const ::MyQQ3Proto::FILE* p = file_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MyQQ3Proto::FILE*>(
      &::MyQQ3Proto::_FILE_default_instance_);
}
inline const ::MyQQ3Proto::FILE& CHATRECORD::file() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.file)
  return _internal_file();
}
inline void CHATRECORD::unsafe_arena_set_allocated_file(
    ::MyQQ3Proto::FILE* file) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_);
  }
  file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MyQQ3Proto.CHATRECORD.file)
}
inline ::MyQQ3Proto::FILE* CHATRECORD::release_file() {
  
  ::MyQQ3Proto::FILE* temp = file_;
  file_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MyQQ3Proto::FILE* CHATRECORD::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.file)
  
  ::MyQQ3Proto::FILE* temp = file_;
  file_ = nullptr;
  return temp;
}
inline ::MyQQ3Proto::FILE* CHATRECORD::_internal_mutable_file() {
  
  if (file_ == nullptr) {
    auto* p = CreateMaybeMessage<::MyQQ3Proto::FILE>(GetArena());
    file_ = p;
  }
  return file_;
}
inline ::MyQQ3Proto::FILE* CHATRECORD::mutable_file() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.file)
  return _internal_mutable_file();
}
inline void CHATRECORD::set_allocated_file(::MyQQ3Proto::FILE* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete file_;
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    
  } else {
    
  }
  file_ = file;
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.file)
}

// .MyQQ3Proto.LINK link = 4;
inline bool CHATRECORD::_internal_has_link() const {
  return this != internal_default_instance() && link_ != nullptr;
}
inline bool CHATRECORD::has_link() const {
  return _internal_has_link();
}
inline void CHATRECORD::clear_link() {
  if (GetArena() == nullptr && link_ != nullptr) {
    delete link_;
  }
  link_ = nullptr;
}
inline const ::MyQQ3Proto::LINK& CHATRECORD::_internal_link() const {
  const ::MyQQ3Proto::LINK* p = link_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MyQQ3Proto::LINK*>(
      &::MyQQ3Proto::_LINK_default_instance_);
}
inline const ::MyQQ3Proto::LINK& CHATRECORD::link() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.link)
  return _internal_link();
}
inline void CHATRECORD::unsafe_arena_set_allocated_link(
    ::MyQQ3Proto::LINK* link) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(link_);
  }
  link_ = link;
  if (link) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MyQQ3Proto.CHATRECORD.link)
}
inline ::MyQQ3Proto::LINK* CHATRECORD::release_link() {
  
  ::MyQQ3Proto::LINK* temp = link_;
  link_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MyQQ3Proto::LINK* CHATRECORD::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.link)
  
  ::MyQQ3Proto::LINK* temp = link_;
  link_ = nullptr;
  return temp;
}
inline ::MyQQ3Proto::LINK* CHATRECORD::_internal_mutable_link() {
  
  if (link_ == nullptr) {
    auto* p = CreateMaybeMessage<::MyQQ3Proto::LINK>(GetArena());
    link_ = p;
  }
  return link_;
}
inline ::MyQQ3Proto::LINK* CHATRECORD::mutable_link() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.link)
  return _internal_mutable_link();
}
inline void CHATRECORD::set_allocated_link(::MyQQ3Proto::LINK* link) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete link_;
  }
  if (link) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(link);
    if (message_arena != submessage_arena) {
      link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link, submessage_arena);
    }
    
  } else {
    
  }
  link_ = link;
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.link)
}

// string uuid = 5;
inline void CHATRECORD::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CHATRECORD::uuid() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.uuid)
  return _internal_uuid();
}
inline void CHATRECORD::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.uuid)
}
inline std::string* CHATRECORD::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& CHATRECORD::_internal_uuid() const {
  return uuid_.Get();
}
inline void CHATRECORD::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CHATRECORD::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.CHATRECORD.uuid)
}
inline void CHATRECORD::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.CHATRECORD.uuid)
}
inline void CHATRECORD::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.CHATRECORD.uuid)
}
inline std::string* CHATRECORD::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CHATRECORD::release_uuid() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CHATRECORD::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.uuid)
}

// string usersenderid = 6;
inline void CHATRECORD::clear_usersenderid() {
  usersenderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CHATRECORD::usersenderid() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.usersenderid)
  return _internal_usersenderid();
}
inline void CHATRECORD::set_usersenderid(const std::string& value) {
  _internal_set_usersenderid(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.usersenderid)
}
inline std::string* CHATRECORD::mutable_usersenderid() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.usersenderid)
  return _internal_mutable_usersenderid();
}
inline const std::string& CHATRECORD::_internal_usersenderid() const {
  return usersenderid_.Get();
}
inline void CHATRECORD::_internal_set_usersenderid(const std::string& value) {
  
  usersenderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CHATRECORD::set_usersenderid(std::string&& value) {
  
  usersenderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.CHATRECORD.usersenderid)
}
inline void CHATRECORD::set_usersenderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usersenderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.CHATRECORD.usersenderid)
}
inline void CHATRECORD::set_usersenderid(const char* value,
    size_t size) {
  
  usersenderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.CHATRECORD.usersenderid)
}
inline std::string* CHATRECORD::_internal_mutable_usersenderid() {
  
  return usersenderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CHATRECORD::release_usersenderid() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.usersenderid)
  return usersenderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CHATRECORD::set_allocated_usersenderid(std::string* usersenderid) {
  if (usersenderid != nullptr) {
    
  } else {
    
  }
  usersenderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usersenderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.usersenderid)
}

// string usersendername = 7;
inline void CHATRECORD::clear_usersendername() {
  usersendername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CHATRECORD::usersendername() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.usersendername)
  return _internal_usersendername();
}
inline void CHATRECORD::set_usersendername(const std::string& value) {
  _internal_set_usersendername(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.usersendername)
}
inline std::string* CHATRECORD::mutable_usersendername() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.usersendername)
  return _internal_mutable_usersendername();
}
inline const std::string& CHATRECORD::_internal_usersendername() const {
  return usersendername_.Get();
}
inline void CHATRECORD::_internal_set_usersendername(const std::string& value) {
  
  usersendername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CHATRECORD::set_usersendername(std::string&& value) {
  
  usersendername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.CHATRECORD.usersendername)
}
inline void CHATRECORD::set_usersendername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usersendername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.CHATRECORD.usersendername)
}
inline void CHATRECORD::set_usersendername(const char* value,
    size_t size) {
  
  usersendername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.CHATRECORD.usersendername)
}
inline std::string* CHATRECORD::_internal_mutable_usersendername() {
  
  return usersendername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CHATRECORD::release_usersendername() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.usersendername)
  return usersendername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CHATRECORD::set_allocated_usersendername(std::string* usersendername) {
  if (usersendername != nullptr) {
    
  } else {
    
  }
  usersendername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usersendername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.usersendername)
}

// string userreceiverid = 8;
inline void CHATRECORD::clear_userreceiverid() {
  userreceiverid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CHATRECORD::userreceiverid() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.userreceiverid)
  return _internal_userreceiverid();
}
inline void CHATRECORD::set_userreceiverid(const std::string& value) {
  _internal_set_userreceiverid(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.userreceiverid)
}
inline std::string* CHATRECORD::mutable_userreceiverid() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.userreceiverid)
  return _internal_mutable_userreceiverid();
}
inline const std::string& CHATRECORD::_internal_userreceiverid() const {
  return userreceiverid_.Get();
}
inline void CHATRECORD::_internal_set_userreceiverid(const std::string& value) {
  
  userreceiverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CHATRECORD::set_userreceiverid(std::string&& value) {
  
  userreceiverid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.CHATRECORD.userreceiverid)
}
inline void CHATRECORD::set_userreceiverid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userreceiverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.CHATRECORD.userreceiverid)
}
inline void CHATRECORD::set_userreceiverid(const char* value,
    size_t size) {
  
  userreceiverid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.CHATRECORD.userreceiverid)
}
inline std::string* CHATRECORD::_internal_mutable_userreceiverid() {
  
  return userreceiverid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CHATRECORD::release_userreceiverid() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.userreceiverid)
  return userreceiverid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CHATRECORD::set_allocated_userreceiverid(std::string* userreceiverid) {
  if (userreceiverid != nullptr) {
    
  } else {
    
  }
  userreceiverid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userreceiverid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.userreceiverid)
}

// string userreceivername = 9;
inline void CHATRECORD::clear_userreceivername() {
  userreceivername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CHATRECORD::userreceivername() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.userreceivername)
  return _internal_userreceivername();
}
inline void CHATRECORD::set_userreceivername(const std::string& value) {
  _internal_set_userreceivername(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.userreceivername)
}
inline std::string* CHATRECORD::mutable_userreceivername() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.userreceivername)
  return _internal_mutable_userreceivername();
}
inline const std::string& CHATRECORD::_internal_userreceivername() const {
  return userreceivername_.Get();
}
inline void CHATRECORD::_internal_set_userreceivername(const std::string& value) {
  
  userreceivername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CHATRECORD::set_userreceivername(std::string&& value) {
  
  userreceivername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.CHATRECORD.userreceivername)
}
inline void CHATRECORD::set_userreceivername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userreceivername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.CHATRECORD.userreceivername)
}
inline void CHATRECORD::set_userreceivername(const char* value,
    size_t size) {
  
  userreceivername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.CHATRECORD.userreceivername)
}
inline std::string* CHATRECORD::_internal_mutable_userreceivername() {
  
  return userreceivername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CHATRECORD::release_userreceivername() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.userreceivername)
  return userreceivername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CHATRECORD::set_allocated_userreceivername(std::string* userreceivername) {
  if (userreceivername != nullptr) {
    
  } else {
    
  }
  userreceivername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userreceivername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.userreceivername)
}

// string chatrecordsendtimestamp = 10;
inline void CHATRECORD::clear_chatrecordsendtimestamp() {
  chatrecordsendtimestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CHATRECORD::chatrecordsendtimestamp() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.chatrecordsendtimestamp)
  return _internal_chatrecordsendtimestamp();
}
inline void CHATRECORD::set_chatrecordsendtimestamp(const std::string& value) {
  _internal_set_chatrecordsendtimestamp(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.chatrecordsendtimestamp)
}
inline std::string* CHATRECORD::mutable_chatrecordsendtimestamp() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.chatrecordsendtimestamp)
  return _internal_mutable_chatrecordsendtimestamp();
}
inline const std::string& CHATRECORD::_internal_chatrecordsendtimestamp() const {
  return chatrecordsendtimestamp_.Get();
}
inline void CHATRECORD::_internal_set_chatrecordsendtimestamp(const std::string& value) {
  
  chatrecordsendtimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CHATRECORD::set_chatrecordsendtimestamp(std::string&& value) {
  
  chatrecordsendtimestamp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.CHATRECORD.chatrecordsendtimestamp)
}
inline void CHATRECORD::set_chatrecordsendtimestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chatrecordsendtimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.CHATRECORD.chatrecordsendtimestamp)
}
inline void CHATRECORD::set_chatrecordsendtimestamp(const char* value,
    size_t size) {
  
  chatrecordsendtimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.CHATRECORD.chatrecordsendtimestamp)
}
inline std::string* CHATRECORD::_internal_mutable_chatrecordsendtimestamp() {
  
  return chatrecordsendtimestamp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CHATRECORD::release_chatrecordsendtimestamp() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.chatrecordsendtimestamp)
  return chatrecordsendtimestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CHATRECORD::set_allocated_chatrecordsendtimestamp(std::string* chatrecordsendtimestamp) {
  if (chatrecordsendtimestamp != nullptr) {
    
  } else {
    
  }
  chatrecordsendtimestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatrecordsendtimestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.chatrecordsendtimestamp)
}

// string chatrecordserverreceivertimestamp = 11;
inline void CHATRECORD::clear_chatrecordserverreceivertimestamp() {
  chatrecordserverreceivertimestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CHATRECORD::chatrecordserverreceivertimestamp() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.chatrecordserverreceivertimestamp)
  return _internal_chatrecordserverreceivertimestamp();
}
inline void CHATRECORD::set_chatrecordserverreceivertimestamp(const std::string& value) {
  _internal_set_chatrecordserverreceivertimestamp(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.chatrecordserverreceivertimestamp)
}
inline std::string* CHATRECORD::mutable_chatrecordserverreceivertimestamp() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.chatrecordserverreceivertimestamp)
  return _internal_mutable_chatrecordserverreceivertimestamp();
}
inline const std::string& CHATRECORD::_internal_chatrecordserverreceivertimestamp() const {
  return chatrecordserverreceivertimestamp_.Get();
}
inline void CHATRECORD::_internal_set_chatrecordserverreceivertimestamp(const std::string& value) {
  
  chatrecordserverreceivertimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CHATRECORD::set_chatrecordserverreceivertimestamp(std::string&& value) {
  
  chatrecordserverreceivertimestamp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.CHATRECORD.chatrecordserverreceivertimestamp)
}
inline void CHATRECORD::set_chatrecordserverreceivertimestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chatrecordserverreceivertimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.CHATRECORD.chatrecordserverreceivertimestamp)
}
inline void CHATRECORD::set_chatrecordserverreceivertimestamp(const char* value,
    size_t size) {
  
  chatrecordserverreceivertimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.CHATRECORD.chatrecordserverreceivertimestamp)
}
inline std::string* CHATRECORD::_internal_mutable_chatrecordserverreceivertimestamp() {
  
  return chatrecordserverreceivertimestamp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CHATRECORD::release_chatrecordserverreceivertimestamp() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.chatrecordserverreceivertimestamp)
  return chatrecordserverreceivertimestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CHATRECORD::set_allocated_chatrecordserverreceivertimestamp(std::string* chatrecordserverreceivertimestamp) {
  if (chatrecordserverreceivertimestamp != nullptr) {
    
  } else {
    
  }
  chatrecordserverreceivertimestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatrecordserverreceivertimestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.chatrecordserverreceivertimestamp)
}

// string chatrecordserversendtimestamp = 12;
inline void CHATRECORD::clear_chatrecordserversendtimestamp() {
  chatrecordserversendtimestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CHATRECORD::chatrecordserversendtimestamp() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.chatrecordserversendtimestamp)
  return _internal_chatrecordserversendtimestamp();
}
inline void CHATRECORD::set_chatrecordserversendtimestamp(const std::string& value) {
  _internal_set_chatrecordserversendtimestamp(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.chatrecordserversendtimestamp)
}
inline std::string* CHATRECORD::mutable_chatrecordserversendtimestamp() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.chatrecordserversendtimestamp)
  return _internal_mutable_chatrecordserversendtimestamp();
}
inline const std::string& CHATRECORD::_internal_chatrecordserversendtimestamp() const {
  return chatrecordserversendtimestamp_.Get();
}
inline void CHATRECORD::_internal_set_chatrecordserversendtimestamp(const std::string& value) {
  
  chatrecordserversendtimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CHATRECORD::set_chatrecordserversendtimestamp(std::string&& value) {
  
  chatrecordserversendtimestamp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.CHATRECORD.chatrecordserversendtimestamp)
}
inline void CHATRECORD::set_chatrecordserversendtimestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chatrecordserversendtimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.CHATRECORD.chatrecordserversendtimestamp)
}
inline void CHATRECORD::set_chatrecordserversendtimestamp(const char* value,
    size_t size) {
  
  chatrecordserversendtimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.CHATRECORD.chatrecordserversendtimestamp)
}
inline std::string* CHATRECORD::_internal_mutable_chatrecordserversendtimestamp() {
  
  return chatrecordserversendtimestamp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CHATRECORD::release_chatrecordserversendtimestamp() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.chatrecordserversendtimestamp)
  return chatrecordserversendtimestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CHATRECORD::set_allocated_chatrecordserversendtimestamp(std::string* chatrecordserversendtimestamp) {
  if (chatrecordserversendtimestamp != nullptr) {
    
  } else {
    
  }
  chatrecordserversendtimestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatrecordserversendtimestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.chatrecordserversendtimestamp)
}

// string chatrecordreceivetimestamp = 13;
inline void CHATRECORD::clear_chatrecordreceivetimestamp() {
  chatrecordreceivetimestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CHATRECORD::chatrecordreceivetimestamp() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.chatrecordreceivetimestamp)
  return _internal_chatrecordreceivetimestamp();
}
inline void CHATRECORD::set_chatrecordreceivetimestamp(const std::string& value) {
  _internal_set_chatrecordreceivetimestamp(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.chatrecordreceivetimestamp)
}
inline std::string* CHATRECORD::mutable_chatrecordreceivetimestamp() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.chatrecordreceivetimestamp)
  return _internal_mutable_chatrecordreceivetimestamp();
}
inline const std::string& CHATRECORD::_internal_chatrecordreceivetimestamp() const {
  return chatrecordreceivetimestamp_.Get();
}
inline void CHATRECORD::_internal_set_chatrecordreceivetimestamp(const std::string& value) {
  
  chatrecordreceivetimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CHATRECORD::set_chatrecordreceivetimestamp(std::string&& value) {
  
  chatrecordreceivetimestamp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.CHATRECORD.chatrecordreceivetimestamp)
}
inline void CHATRECORD::set_chatrecordreceivetimestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chatrecordreceivetimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.CHATRECORD.chatrecordreceivetimestamp)
}
inline void CHATRECORD::set_chatrecordreceivetimestamp(const char* value,
    size_t size) {
  
  chatrecordreceivetimestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.CHATRECORD.chatrecordreceivetimestamp)
}
inline std::string* CHATRECORD::_internal_mutable_chatrecordreceivetimestamp() {
  
  return chatrecordreceivetimestamp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CHATRECORD::release_chatrecordreceivetimestamp() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.chatrecordreceivetimestamp)
  return chatrecordreceivetimestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CHATRECORD::set_allocated_chatrecordreceivetimestamp(std::string* chatrecordreceivetimestamp) {
  if (chatrecordreceivetimestamp != nullptr) {
    
  } else {
    
  }
  chatrecordreceivetimestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatrecordreceivetimestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.chatrecordreceivetimestamp)
}

// string remark = 14;
inline void CHATRECORD::clear_remark() {
  remark_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CHATRECORD::remark() const {
  // @@protoc_insertion_point(field_get:MyQQ3Proto.CHATRECORD.remark)
  return _internal_remark();
}
inline void CHATRECORD::set_remark(const std::string& value) {
  _internal_set_remark(value);
  // @@protoc_insertion_point(field_set:MyQQ3Proto.CHATRECORD.remark)
}
inline std::string* CHATRECORD::mutable_remark() {
  // @@protoc_insertion_point(field_mutable:MyQQ3Proto.CHATRECORD.remark)
  return _internal_mutable_remark();
}
inline const std::string& CHATRECORD::_internal_remark() const {
  return remark_.Get();
}
inline void CHATRECORD::_internal_set_remark(const std::string& value) {
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CHATRECORD::set_remark(std::string&& value) {
  
  remark_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MyQQ3Proto.CHATRECORD.remark)
}
inline void CHATRECORD::set_remark(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MyQQ3Proto.CHATRECORD.remark)
}
inline void CHATRECORD::set_remark(const char* value,
    size_t size) {
  
  remark_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MyQQ3Proto.CHATRECORD.remark)
}
inline std::string* CHATRECORD::_internal_mutable_remark() {
  
  return remark_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CHATRECORD::release_remark() {
  // @@protoc_insertion_point(field_release:MyQQ3Proto.CHATRECORD.remark)
  return remark_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CHATRECORD::set_allocated_remark(std::string* remark) {
  if (remark != nullptr) {
    
  } else {
    
  }
  remark_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remark,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MyQQ3Proto.CHATRECORD.remark)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MyQQ3Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE>() {
  return ::MyQQ3Proto::CHATRECORD_CHATRECORDTYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2eproto
